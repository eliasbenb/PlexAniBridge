name: Docker Build and Publish

on:
  push:
    branches: [ main, develop ]
    tags: [ "v*" ]
  workflow_dispatch:
    inputs:
      ref:
        description: Git ref (tag/branch)
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Set lowercase repository name
        id: repo-name
        run: |
          echo "IMAGE_NAME_LC=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Set version variables
        run: |
          echo "IS_STABLE=${{ github.ref_type == 'tag' && !contains(github.ref, '-alpha.') && !contains(github.ref, '-beta.') }}" >> $GITHUB_ENV
          echo "IS_ALPHA=${{ github.ref_type == 'tag' && contains(github.ref, '-alpha.') }}" >> $GITHUB_ENV
          echo "IS_BETA=${{ github.ref_type == 'tag' && contains(github.ref, '-beta.') }}" >> $GITHUB_ENV
          echo "IS_PRERELEASE=${{ github.ref_type == 'tag' && (contains(github.ref, '-alpha.') || contains(github.ref, '-beta.')) }}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            # X.Y.Z, X.Y, X
            type=semver,pattern={{version}},enable=${{ env.IS_STABLE }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ env.IS_STABLE }}
            type=semver,pattern={{major}},enable=${{ env.IS_STABLE }}
            # vX.Y.Z, vX.Y, vX
            type=semver,pattern=v{{version}},enable=${{ env.IS_STABLE }}
            type=semver,pattern=v{{major}}.{{minor}},enable=${{ env.IS_STABLE }}
            type=semver,pattern=v{{major}},enable=${{ env.IS_STABLE }}
            # X.Y.Z-alpha.W, X.Y.Z-beta.W
            type=semver,pattern={{version}},enable=${{ env.IS_PRERELEASE }}
            # vX.Y.Z-alpha.W, vX.Y.Z-beta.W
            type=semver,pattern={{raw}},enable=${{ env.IS_PRERELEASE }}
            # alpha, beta
            type=raw,value=alpha,enable=${{ env.IS_ALPHA }}
            type=raw,value=beta,enable=${{ env.IS_BETA }}
            # main, develop
            type=ref,event=branch
            # latest
            type=raw,value=latest,enable=${{ env.IS_STABLE }}

      - name: Build and Push Docker Image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Delete Untagged Packages
        uses: dataaxiom/ghcr-cleanup-action@v1
        continue-on-error: true
        with:
          delete-untagged: true
          delete-ghost-images: true
          delete-orphaned-images: true
          validate: true
          package: ${{ env.IMAGE_NAME_LC }}
