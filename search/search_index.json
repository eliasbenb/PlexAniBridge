{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PlexAniBridge","text":"<p>The smart way to keep your AniList profile perfectly synchronized with your Plex library.</p> <p> </p> <p>Quick Start Docker | Quick Start Source | Configuration</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd04 Comprehensive Synchronization: Automatically syncs watch status, progress, ratings, reviews, and start/completion dates between Plex and AniList.</li> <li>\ud83c\udfaf Smart Content Matching: Uses a curated mappings database with fuzzy title search fallback and support for custom mapping overrides.</li> <li>\u26a1 Optimized Performance: Intelligent batch processing, rate limiting, and caching to minimize API usage while maximizing sync speed.</li> <li>\ud83d\udc65 Multi-User &amp; Multi-Profile: Supports multiple Plex users (including Home users) with individual AniList accounts and configurable sync profiles.</li> <li>\ud83d\udda5\ufe0f Web Dashboard: Intuitive web interface with a real-time sync timeline, profile management, custom mapping editor, and log viewer.</li> <li>\ud83d\udd27 Flexible Configuration: Filter by library sections or genres and configure scanning modes (periodic, polling, or webhooks).</li> <li>\ud83d\udee1\ufe0f Safe &amp; Reliable: Built-in dry run mode for testing and automatic AniList backups with a restore script for easy recovery.</li> <li>\ud83d\udc33 Easy Deployment: Docker-ready with easy and comprehensive environment variable configuration.</li> </ul>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Kometa Mappings: The inspiration behind the mappings database.</li> <li>Python-PlexAPI: Powerful and straightforward Plex API bindings.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#example","title":"Example","text":"<p>Below is an example <code>.env</code> file for PlexAniBridge:</p> .env<pre><code>#== Global Defaults ==#\nPAB_ANILIST_TOKEN=...\nPAB_PLEX_TOKEN=...\nPAB_PLEX_USER=...\nPAB_PLEX_URL=...\n# PAB_PLEX_SECTIONS=[]\n# PAB_PLEX_GENRES=[]\n# PAB_PLEX_METADATA_SOURCE=\"local\"\n# PAB_SYNC_INTERVAL=86400\n# PAB_SYNC_MODES=[\"periodic\", \"poll\", \"webhook\"]\n# PAB_FULL_SCAN=false\n# PAB_DESTRUCTIVE_SYNC=false\n# PAB_EXCLUDED_SYNC_FIELDS=[\"notes\", \"score\"]\n# PAB_DRY_RUN=false\n# PAB_BATCH_REQUESTS=false\n# PAB_SEARCH_FALLBACK_THRESHOLD=-1\n\n#== Profile Overrides ==#\n# PAB_PROFILES__example__$FIELD=$VALUE\n\n#== Global Settings ==#\n# PAB_DATA_PATH=\"./data\"\n# PAB_LOG_LEVEL=\"INFO\"\n# PAB_MAPPINGS_URL=\"https://raw.githubusercontent.com/eliasbenb/PlexAniBridge-Mappings/v2/mappings.json\"\n# PAB_WEB_ENABLED=true\n# PAB_WEB_HOST=\"0.0.0.0\"\n# PAB_WEB_PORT=4848\n</code></pre> YAML Configuration <p>If you prefer YAML configuration, you can create a <code>config.yaml</code> file in the data directory. The settings will be automatically loaded from there. Example:</p> config.yaml<pre><code>#== Global Defaults ==#\nanilist_token: ...\nplex_token: ...\nplex_user: ...\nplex_url: ...\n# plex_sections: []\n# plex_genres: []\n# plex_metadata_source: \"local\"\n# sync_interval: 86400\n# sync_modes: [\"periodic\", \"poll\", \"webhook\"]\n# full_scan: false\n# destructive_sync: false\n# excluded_sync_fields: [\"notes\", \"score\"]\n# dry_run: false\n# batch_requests: false\n# search_fallback_threshold: -1\n\n#== Profile Overrides ==#\n# profiles:\n#     example:\n#         $field: $value\n\n#== Global Settings ==#\n# data_path: \"./data\"\n# log_level: \"INFO\"\n# mappings_url: \"https://raw.githubusercontent.com/eliasbenb/PlexAniBridge-Mappings/v2/mappings.json\"\n# web_enabled: true\n# web_host: \"0.0.0.0\"\n# web_port: 4848\n</code></pre> <p>The order of precedence when loading settings is:</p> <ol> <li>Environment variables</li> <li><code>.env</code> file in the current working directory</li> <li><code>config.yaml</code> file in the data directory</li> </ol>"},{"location":"configuration/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<p>Settings are applied in the following order:</p> <ol> <li>Profile-specific settings (highest priority)</li> <li>Global default settings (medium priority)</li> <li>Built-in defaults (lowest priority)</li> </ol> <p>For example, if <code>PAB_SYNC_INTERVAL=900</code> is set globally and <code>PAB_PROFILES__personal__SYNC_INTERVAL=1800</code> is set for a specific profile, the profile named 'personal' will use 1800 seconds as the sync interval while other profiles will use 900 seconds. If <code>PAB_PROFILES__personal__SYNC_INTERVAL</code> is unset it falls back to the application's built-in default of 86400 seconds (24 hours).</p>"},{"location":"configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"configuration/#anilist_token","title":"<code>ANILIST_TOKEN</code>","text":"<p><code>str</code> (Required)</p> <p>AniList API access token for this profile.</p> <p> Generate AniList Token</p>"},{"location":"configuration/#plex_token","title":"<code>PLEX_TOKEN</code>","text":"<p><code>str</code> (Required)</p> <p>Plex API access token (<code>X-Plex-Token</code>) belonging to the admin user of the server.</p> <p> Finding the Plex Token</p>"},{"location":"configuration/#plex_user","title":"<code>PLEX_USER</code>","text":"<p><code>str</code> (Required)</p> <p>Plex user to sync for this profile. Can be identified by:</p> <ul> <li>Plex account username: <code>\"username\"</code></li> <li>Plex account email: <code>\"user@email.com\"</code></li> <li>Plex Home user name: <code>\"Home User\"</code></li> </ul> Admin User Limitations <p>Due to limitations in the Plex API, only the admin user can sync reviews and watch lists. All other features are available for all users.</p>"},{"location":"configuration/#plex_url","title":"<code>PLEX_URL</code>","text":"<p><code>str</code> (Required)</p> <p>URL to your Plex server that the PlexAniBridge host can access.</p>"},{"location":"configuration/#plex_sections","title":"<code>PLEX_SECTIONS</code>","text":"<p><code>list[str]</code> (Optional, default: <code>[]</code>)</p> <p>An optional list of Plex library sections to filter by. If specified, only items in these sections will be scanned.</p> <pre><code>[\"Anime\", \"Anime Movies\"]\n</code></pre>"},{"location":"configuration/#plex_genres","title":"<code>PLEX_GENRES</code>","text":"<p><code>list[str]</code> (Optional, default: <code>[]</code>)</p> <p>An optional list of Plex genres to filter by. If specified, only items with these genres will be scanned.</p> <pre><code>[\"Anime\", \"Animation\"]\n</code></pre> <p>This is useful for scanning for only Anime content in a mixed library.</p> <p>How to Find Plex Genres</p> <p>Genres are sourced from the media item's source metadata agent (typically TheMovieDB or TheTVDB). You can find some of the common genres here:</p> <ul> <li>TheTVDB Genres</li> <li>TheMovieDB Genres</li> </ul>"},{"location":"configuration/#plex_metadata_source","title":"<code>PLEX_METADATA_SOURCE</code>","text":"<p><code>Enum(\"local\", \"online\")</code> (Optional, default: <code>\"local\"</code>)</p> <p>Determines the source of Plex metadata to use when syncing:</p> <ul> <li><code>local</code>: Use metadata stored locally on the Plex server.</li> <li><code>online</code>: Fetch metadata from Plex's servers using the Plex Metadata provider.</li> </ul> <p>Online Metadata Advantages and Limitations</p> <p>Online metadata can provide a more complete library (including seasons/episodes not present locally) and records activity across Plex servers, allowing syncs for content from multiple or previously deleted servers.</p> <p>Limitations:</p> <ul> <li>Susceptible to outages and rate limits, which can greatly slow syncs.</li> <li>Requires Plex Sync to be enabled for the online API to function.</li> <li>May be less up-to-date than the local server if Plex Sync fails.</li> <li>The online API is available only to the Plex admin user..</li> </ul>"},{"location":"configuration/#sync_interval","title":"<code>SYNC_INTERVAL</code>","text":"<p><code>int</code> (Optional, default: <code>86400</code>)</p> <p>Interval in seconds to sync when using the <code>periodic</code> sync mode</p>"},{"location":"configuration/#sync_modes","title":"<code>SYNC_MODES</code>","text":"<p><code>list[Enum(\"periodic\", \"poll\", \"webhook\")]</code> (Optional, default: <code>[\"periodic\", \"poll\", \"webhook\"]</code>)</p> <p>Determines the triggers for scanning:</p> <ul> <li><code>periodic</code>: Scan all items at the specified sync interval.</li> <li><code>poll</code>: Poll for changes every 30 seconds, making incremental updates.</li> <li><code>webhook</code>: Trigger syncs via Plex webhook payloads.</li> </ul> <p>Setting <code>SYNC_MODES</code> to <code>None</code> or an empty list will cause the application to perform a single scan on startup and then exit.</p> <p>By default, all three modes are enabled, allowing for instant, incremental updates via polling and webhooks, as well as a full periodic scan every <code>SYNC_INTERVAL</code> seconds (default: 24 hours) to catch any failed/missed updates.</p> <p>Plex Webhooks</p> <p>To use Plex Webhooks, you must:</p> <ol> <li>Have <code>PAB_WEB_ENABLED</code> set to <code>True</code> (the default).</li> <li>Include <code>webhook</code> in the enabled <code>SYNC_MODES</code>.</li> <li>Configure the Plex server to send webhook payloads to <code>http://&lt;your-server-host&gt;:&lt;port&gt;/webhook/plex</code>.</li> <li>Ensure PlexAniBridge is accessible to Plex over the network.</li> </ol> <p>Example webhook URL: <code>http://127.0.0.1:4848/webhook/plex</code></p> <p>Once webhooks are set up, it is recommended to disable <code>poll</code> mode since it is redundant.</p>"},{"location":"configuration/#full_scan","title":"<code>FULL_SCAN</code>","text":"<p><code>bool</code> (Optional, default: <code>False</code>)</p> <p>When enabled, the scan process will include all items, regardless of watch activity. By default, only watched items are scanned.</p> <p>Recommended Usage</p> <p>Full scans are generally not recommended unless combined with <code>DESTRUCTIVE_SYNC</code> to delete AniList entries for unwatched Plex content.</p> <p>Enabling <code>FULL_SCAN</code> can lead to excessive API usage and longer processing times.</p>"},{"location":"configuration/#destructive_sync","title":"<code>DESTRUCTIVE_SYNC</code>","text":"<p><code>bool</code> (Optional, default: <code>False</code>)</p> <p>Allows regressive updates and deletions, which can cause data loss.</p> <p>Data Loss Warning</p> <p>Enable only if you understand the implications.</p> <p>Destructive sync allows:</p> <ul> <li>Deleting AniList entries.</li> <li>Making regressive updates - e.g., if AniList progress is higher than Plex, AniList will be lowered to match Plex.</li> </ul> <p>To delete AniList entries for unwatched Plex content, enable both <code>FULL_SCAN</code> and <code>DESTRUCTIVE_SYNC</code>.</p>"},{"location":"configuration/#excluded_sync_fields","title":"<code>EXCLUDED_SYNC_FIELDS</code>","text":"<p><code>list[Enum(\"status\", \"score\", \"progress\", \"repeat\", \"notes\", \"started_at\", \"completed_at\")]</code> (Optional, default: <code>[\"notes\", \"score\"]</code>)</p> <p>Specifies which fields should not be synced. Available fields:</p> <ul> <li><code>status</code> (planning, current, completed, dropped, paused)</li> <li><code>score</code> (rating on a normalized scale)</li> <li><code>progress</code> (episodes watched)</li> <li><code>repeat</code> (rewatch count)</li> <li><code>notes</code> (text reviews)</li> <li><code>started_at</code> (start date)</li> <li><code>completed_at</code> (completion date)</li> </ul> <p>Allowing All Fields</p> <p>To sync all fields, set this to an empty list: <code>[]</code>.</p>"},{"location":"configuration/#dry_run","title":"<code>DRY_RUN</code>","text":"<p><code>bool</code> (Optional, default: <code>False</code>)</p> <p>When enabled:</p> <ul> <li>AniList data is not modified.</li> <li>Logs show what changes would have been made.</li> </ul> <p>First Run</p> <p>Run with <code>DRY_RUN</code> enabled on first launch to preview changes without modifying your AniList data.</p>"},{"location":"configuration/#batch_requests","title":"<code>BATCH_REQUESTS</code>","text":"<p><code>bool</code> (Optional, default: <code>False</code>)</p> <p>When enabled, AniList API requests are made in batches:</p> <ol> <li>Prior to syncing, a batch of requests is created to retrieve all the entries that will be worked on.</li> <li>Post-sync, a batch of requests is created to update all the entries that were changed.</li> </ol> <p>This can significantly reduce rate limiting, but at the cost of atomicity. If any request in the batch fails, the entire batch will fail.</p> <p>For example, if a sync job finds 10 items to update with <code>BATCH_REQUESTS</code> enabled, all 10 requests will be sent at once. If any of the requests fail, all 10 updates will fail.</p> <p>First Run</p> <p>The primary use case of batch requests is going through the first sync of a large library. It can significantly reduce rate limiting from AniList.</p> <p>For subsequent syncs, your data is pre-cached, and the benefit of batching is reduced.</p>"},{"location":"configuration/#search_fallback_threshold","title":"<code>SEARCH_FALLBACK_THRESHOLD</code>","text":"<p><code>int</code> (Optional, default: <code>-1</code>)</p> <p>Determines how similar a title must be to the search query as a percentage to be considered a match.</p> <p>The default behavior is to disable searching completely and only rely on the community and local mappings database.</p> <p>The higher the value, the more strict the title matching. A value of <code>100</code> requires an exact match, while <code>0</code> will match the first result returned by AniList, regardless of similarity.</p>"},{"location":"configuration/#global-configuration-options","title":"Global Configuration Options","text":"<p>These global settings cannot be overridden on the profile level and apply to all profiles.</p>"},{"location":"configuration/#pab_data_path","title":"<code>PAB_DATA_PATH</code>","text":"<p><code>str</code> (Optional, default: <code>./data</code>)</p> <p>Path to store the database, backups, and custom mappings. This is shared across all profiles.</p>"},{"location":"configuration/#pab_log_level","title":"<code>PAB_LOG_LEVEL</code>","text":"<p><code>Enum(\"DEBUG\", \"INFO\", \"SUCCESS\", \"WARNING\", \"ERROR\", \"CRITICAL\")</code> (Optional, default: <code>INFO</code>)</p> <p>Sets logging verbosity for the entire application.</p> <p>Minimal Logging</p> <p>For minimal logging, set the verbosity to <code>SUCCESS</code> which only logs successful operations like syncing entries.</p> <p>Debugging</p> <p>For the most detailed logs, set this to <code>DEBUG</code>.</p>"},{"location":"configuration/#pab_mappings_url","title":"<code>PAB_MAPPINGS_URL</code>","text":"<p><code>str</code> (Optional, default: <code>https://raw.githubusercontent.com/eliasbenb/PlexAniBridge-Mappings/v2/mappings.json</code>)</p> <p>URL to the upstream mappings source. This can be a JSON or YAML file.</p> <p>This option is only intended for advanced users who want to use their own upstream mappings source or disable upstream mappings entirely. For most users, it is recommended to keep the default value.</p> <p>Custom Mappings</p> <p>This setting works in tandem with custom mappings stored in the <code>mappings/</code> directory inside the data path. Custom mappings will overload any upstream mappings.</p> Disabling Upstream Mappings <p>To disable upstream mappings, set this to an empty string: <code>\"\"</code>.</p>"},{"location":"configuration/#pab_web_enabled","title":"<code>PAB_WEB_ENABLED</code>","text":"<p><code>bool</code> (Optional, default: <code>True</code>)</p> <p>When enabled, the web interface is accessible.</p>"},{"location":"configuration/#pab_web_host","title":"<code>PAB_WEB_HOST</code>","text":"<p><code>str</code> (Optional, default: <code>0.0.0.0</code>)</p> <p>The host address for the web interface.</p>"},{"location":"configuration/#pab_web_port","title":"<code>PAB_WEB_PORT</code>","text":"<p><code>int</code> (Optional, default: <code>4848</code>)</p> <p>The port for the web interface.</p>"},{"location":"configuration/#advanced-examples","title":"Advanced Examples","text":""},{"location":"configuration/#multiple-users","title":"Multiple Users","text":"<p>This example demonstrates configuring three distinct profiles, each with their own AniList accounts, Plex users, and customized sync preferences.</p> <pre><code># Global defaults shared by all profiles\nPAB_PLEX_TOKEN=admin_plex_token\nPAB_PLEX_URL=http://localhost:32400\nPAB_SYNC_MODES=[\"periodic\"]\n\n# Admin user - aggressive sync with full features\nPAB_PROFILES__admin__ANILIST_TOKEN=admin_anilist_token\nPAB_PROFILES__admin__PLEX_USER=admin_plex_user\nPAB_PROFILES__admin__DESTRUCTIVE_SYNC=True\nPAB_PROFILES__admin__EXCLUDED_SYNC_FIELDS=[]\n\n# Family member - typical sync\nPAB_PROFILES__family__ANILIST_TOKEN=family_anilist_token\nPAB_PROFILES__family__PLEX_USER=family_plex_user\n\n# Guest user - minimal sync\nPAB_PROFILES__guest__ANILIST_TOKEN=guest_anilist_token\nPAB_PROFILES__guest__PLEX_USER=guest_plex_user\nPAB_PROFILES__guest__EXCLUDED_SYNC_FIELDS=[\"notes\", \"score\", \"repeat\", \"started_at\", \"completed_at\"]\n</code></pre>"},{"location":"configuration/#per-library-profiles","title":"Per-Library Profiles","text":"<p>This example shows how to create separate profiles for different Plex libraries, allowing for tailored sync settings based on content type.</p> <pre><code># Global defaults shared by all profiles\nPAB_ANILIST_TOKEN=global_anilist_token\nPAB_PLEX_TOKEN=admin_plex_token\nPAB_PLEX_USER=admin_plex_user\nPAB_PLEX_URL=http://localhost:32400\n\n# Movies library - aggressive sync with full features\nPAB_PROFILES__movies__PLEX_SECTIONS=[\"Anime Movies\"]\nPAB_PROFILES__movies__FULL_SCAN=True\nPAB_PROFILES__movies__SYNC_INTERVAL=1800\nPAB_PROFILES__movies__EXCLUDED_SYNC_FIELDS=[]\n\n# TV Shows library - more conservative with updates\nPAB_PROFILES__tvshows__PLEX_SECTIONS=[\"Anime\"]\nPAB_PROFILES__tvshows__SYNC_MODES=[\"periodic\"]\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#why-is-my-repeat-count-incorrect","title":"Why is my repeat count incorrect?","text":"<p>PlexAniBridge relies on your Plex server to provide accurate <code>viewCount</code> attributes when calculating the repeat count. It is a known issue that Plex may not always update this count reliably or in a way users might expect.</p> <p>Certain actions can make the <code>viewCount</code> behave unexpectedly or become corrupted. Common causes include deleting and re-adding items, syncing play history across multiple devices, and manually marking an item as watched/unwatched.</p> <p>If you notice discrepancies in repeat counts, consider querying your Plex server directly to verify the <code>viewCount</code> values for specific items. If the counts are incorrect at the source, PlexAniBridge will reflect those inaccuracies. See #174 for more details.</p> <p>Note: the <code>viewCount</code> attribute is not equivalent to the number of items under \"View Play History\" in the Plex UI.</p>"},{"location":"faq/#why-are-there-no-mappings-for-x","title":"Why are there no mappings for X?","text":"<p>While PlexAniBridge aims to cover as many titles as possible (and we are proud to say we have one of the most comprehensive mapping databases available), there are still some titles that may not be mapped. If you get a \"not found\" message for one of your titles, it could be due to several reasons:</p> <ul> <li>The title is very new or obscure and has not yet been added to the mapping database.</li> <li>The title is uncorrectable due to mismatches across databases (see PlexAniBridge-Mappings#known-issues).</li> <li>We just missed it!</li> </ul> <p>If you find a title that is not mapped, please consider submitting a pull request to the PlexAniBridge-Mappings repository with your corrections or additions.</p>"},{"location":"faq/#why-doesnt-x-sync-when-its-in-the-mappings","title":"Why doesn't X sync when it's in the mappings?","text":"<p>If Plex is not correctly identifying or updating the metadata for an item, it may not sync properly. Ensure that item is correctly matched to the TVDB/TMDB/IMDb ID in your mappings and try refreshing the metadata in Plex.</p>"},{"location":"faq/#is-the-hama-agent-supported","title":"Is the HAMA agent supported?","text":"<p>No, PlexAniBridge does not support the HAMA agent. It is recommended to use the default Plex TV and Movie agents for best compatibility (we recommend the \"TheTVDB\" episode ordering for TV shows).</p> <p>Support is not planned for HAMA since it is slated for deprecation in the near future.</p>"},{"location":"mappings/custom-mappings/","title":"Custom Mappings","text":"<p>PlexAniBridge allows you to define custom mappings for Plex content to AniList, supplementing the default mappings database. This feature is particularly helpful for content that is missing or incorrectly mapped in the default database.</p> <p>Note</p> <p>Custom mappings merge with the default mappings, they do not override them. This means that if you add a custom mapping for a series that is already in the default database, only the fields specified in the custom mapping will be updated. The remaining pre-existing fields will remain unchanged.</p> <p>Below is an example mappings file. You can use the JSON schema or the PlexAniBridge-Mappings database as reference.</p> mappings.custom.yaml<pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/eliasbenb/PlexAniBridge-Mappings/v2/mappings.schema.json\n\n$includes:\n    - /path/to/another/mappings.json\n    - https://url.to/another/mappings.json\n\n99999:\n    anidb_id: 9999\n    imdb_id: tt9999999\n    mal_id: 9999\n    tmdb_show_id: 9999\n    tvdb_id: 9999\n    tvdb_mappings:\n        s0: e1\n        s1: e1-e13\n\n99998:\n    anidb_id: 9998\n    imdb_id: tt9999998\n    mal_id: 9998\n    tmdb_movie_id: 9998\n</code></pre> JSON Format for Mappings <p>The mappings file can also be written in JSON format. Here is the same example in JSON:</p> mappings.custom.json<pre><code>{\n    \"$schema\": \"https://raw.githubusercontent.com/eliasbenb/PlexAniBridge-Mappings/v2/mappings.schema.json\",\n    \"$includes\": [\n        \"/path/to/another/mappings.json\",\n        \"https://url.to/another/mappings.json\"\n    ],\n    \"99999\": {\n        \"anidb_id\": 9999,\n        \"imdb_id\": \"tt9999999\",\n        \"mal_id\": 9999,\n        \"tmdb_show_id\": 9999,\n        \"tvdb_id\": 9999,\n        \"tvdb_mappings\": {\n            \"s0\": \"e1\",\n            \"s1\": \"e1-e13\"\n        }\n    },\n    \"99998\": {\n        \"anidb_id\": 9998,\n        \"imdb_id\": \"tt9999998\",\n        \"mal_id\": 9998,\n        \"tmdb_movie_id\": 9998\n    }\n}\n</code></pre> <p>Including External Mappings</p> mappings.custom.yaml<pre><code>$includes:\n    - \"https://example.com/mappings.json\"\n    - \"/path/to/mappings.yaml\"\n    - \"./relative/path/to/mappings.yml\"\n</code></pre>"},{"location":"mappings/custom-mappings/#local-custom-mappings","title":"Local Custom Mappings","text":"<p>PlexAniBridge will look for a custom mappings file with the name <code>mappings.custom.(json|yaml|yml)</code> in the <code>PAB_DATA_PATH</code> directory. The file extension determines the format of the file (YAML or JSON).</p>"},{"location":"mappings/custom-mappings/#community-custom-mappings","title":"Community Custom Mappings","text":"<p>There are community maintained mappings repositories that you can use to get pre-made mappings for your content. You can include these mappings in your custom mappings file using the <code>$includes</code> key as explained above.</p> <ul> <li> LuceoEtzio/PlexAniBridge-Custom-Mappings </li> </ul>"},{"location":"mappings/custom-mappings/#default-mappings","title":"Default Mappings","text":"<p>If you want to contribute your custom mappings to the community, you can submit a pull request to the PlexAniBridge-Mappings repository. Your pull request should modify the <code>mappings.edits.yaml</code> and not the <code>mappings.json</code> file.</p>"},{"location":"mappings/mappings-querying-language/","title":"Mappings Querying Language","text":"<p>PlexAniBridge provides a Booru-like querying language for searching the mappings database and AniList API. You can use this language on the Mappings Page of the web interface or through the API at:</p> <pre><code>/api/mappings?q=&lt;query&gt;\n</code></pre>"},{"location":"mappings/mappings-querying-language/#basic-syntax","title":"Basic Syntax","text":"<p>The querying language supports a wide range of operators to build flexible and complex queries. The web UI includes a search bar with query suggestions to help you construct valid queries.</p>"},{"location":"mappings/mappings-querying-language/#search-terms","title":"Search Terms","text":"<ul> <li>Fielded search: <code>foo:bar</code> \u2192 Search for <code>bar</code> in field <code>foo</code></li> <li>AniList search: <code>\"foo\"</code> \u2192 Search AniList API for the bare term <code>foo</code></li> </ul>"},{"location":"mappings/mappings-querying-language/#boolean-operators","title":"Boolean Operators","text":"<ul> <li>AND: <code>foo bar</code> \u2192 Search for results matching both <code>foo</code> and <code>bar</code></li> <li>OR (prefix): <code>~foo ~bar baz</code> \u2192 Search for <code>(foo OR bar) AND baz</code> (tilde marks OR terms within an AND group)</li> <li>OR (infix): <code>foo | bar baz</code> \u2192 Search for <code>foo OR (bar AND baz)</code> (pipe creates OR between AND expressions)</li> <li>NOT: <code>-foo</code> \u2192 Exclude results matching <code>foo</code></li> </ul>"},{"location":"mappings/mappings-querying-language/#grouping","title":"Grouping","text":"<ul> <li><code>(foo | bar) baz</code> \u2192 Search for <code>(foo OR bar) AND baz</code></li> </ul>"},{"location":"mappings/mappings-querying-language/#ranges","title":"Ranges","text":"<ul> <li><code>foo:&lt;10</code> \u2192 Search where <code>foo</code> is less than 10</li> <li><code>foo:100..210</code> \u2192 Search where <code>foo</code> is between 100 and 210</li> </ul>"},{"location":"mappings/mappings-querying-language/#field-presence","title":"Field Presence","text":"<ul> <li><code>has:foo</code> \u2192 Search for mappings that have the field <code>foo</code></li> </ul>"},{"location":"mappings/mappings-querying-language/#wildcards","title":"Wildcards","text":"<p>Use <code>*</code> for any sequence of characters and <code>?</code> for a single character. Matching is case-insensitive.</p> <ul> <li><code>foo:bar*</code> \u2192 Search for mappings where field <code>foo</code> starts with <code>bar</code></li> <li><code>foo:*bar</code> \u2192 Search for mappings where field <code>foo</code> ends with <code>bar</code></li> <li><code>foo:b?r</code> \u2192 Search for mappings where field <code>foo</code> matches <code>b?r</code> (e.g., <code>bar</code>, <code>ber</code>, <code>bir</code>, etc.)</li> </ul>"},{"location":"mappings/mappings-querying-language/#querying-json-fields","title":"Querying JSON fields","text":"<p>For fields that store JSON dictionaries, you can use the following syntax:</p> <ul> <li><code>foo:bar</code> \u2192 Search for mappings where the JSON field <code>foo</code> contains the key <code>bar</code> or the value <code>bar</code></li> <li><code>foo:bar*</code> \u2192 Search for mappings where the JSON field <code>foo</code> contains a key starting with <code>bar</code> or a value starting with <code>bar</code>. All other wildcard patterns are also supported.</li> </ul>"},{"location":"mappings/mappings-querying-language/#supported-database-fields","title":"Supported Database Fields","text":"<p>The following fields are queried against the local mappings database:</p> <ul> <li><code>anilist</code> \u2192 AniList ID</li> <li><code>anidb</code> \u2192 AniDB ID</li> <li><code>imdb</code> \u2192 IMDb ID</li> <li><code>mal</code> \u2192 MyAnimeList ID</li> <li><code>tmdb_movie</code> \u2192 TMDB Movie ID</li> <li><code>tmdb_show</code> \u2192 TMDB Show ID</li> <li><code>tvdb</code> \u2192 TVDB Show ID</li> <li><code>tmdb_mappings</code> \u2192 Searches keys/values in TMDB mappings dictionary</li> <li><code>tvdb_mappings</code> \u2192 Searches keys/values in TVDB mappings dictionary</li> </ul>"},{"location":"mappings/mappings-querying-language/#supported-anilist-fields","title":"Supported AniList Fields","text":"<p>The following fields are queried against the AniList API:</p> <ul> <li><code>\"foo\"</code> \u2192 Searches AniList for the bare term <code>foo</code>.</li> <li><code>anilist.title\"</code> \u2192 Alias for <code>\"foo\"</code>, searches AniList for the bare term <code>foo</code>.</li> <li><code>anilist.duration</code> \u2192 Duration in minutes</li> <li><code>anilist.episodes</code> \u2192 Number of episodes</li> <li><code>anilist.start_date</code> \u2192 Start date (YYYYMMDD)</li> <li><code>anilist.end_date</code> \u2192 End date (YYYYMMDD)</li> <li><code>anilist.format</code> \u2192 Format (e.g., TV, MOVIE, OVA, etc.)</li> <li><code>anilist.status</code> \u2192 Status (e.g., FINISHED, RELEASING, NOT_YET_RELEASED, etc.)</li> <li><code>anilist.genre</code> \u2192 Genre (e.g., Action, Comedy, Drama, etc.)</li> <li><code>anilist.tag</code> \u2192 Tag (e.g., Mecha, School, Shounen, etc.)</li> <li><code>anilist.average_score</code> \u2192 Average score (0-100)</li> <li><code>anilist.popularity</code> \u2192 Popularity (number of AniList users with the entry in their list)</li> </ul>"},{"location":"mappings/mappings-querying-language/#example-queries","title":"Example Queries","text":"<pre><code>\"Dororo\" \n# Title search for \"Dororo\"\n\nanilist:101347 \n# AniList ID lookup\n\ntvdb:328592 | tmdb_show:21298\n# TVDB ID 328592 OR TMDB Show ID 21298\n\nanilist:&gt;100000\n# AniList IDs greater than 100000\n\n-(anilist:100..200)\n# Exclude AniList IDs 100 to 200 (inclusive)\n\n-has:tvdb_mappings\n# Exclude results that have TVDB mappings\n\nimdb:tt0*\n# IMDb IDs starting with \"tt0\"\n\ntvdb_mappings:s0\n# TVDB mappings with season 0\n\ntmdb_mappings:e12*\n# TMDB mappings starting with episode 12\n\nanilist.status:RELEASING anilist.genre:Action\n# Currently releasing anime in the Action genre\n\nanilist.format:TV anilist.average_score:&gt;80 anilist.popularity:&gt;5000\n# TV format anime with average score over 80 and popularity over 5000\n</code></pre>"},{"location":"quick-start/docker/","title":"Docker","text":""},{"location":"quick-start/docker/#requirements","title":"Requirements","text":"<ul> <li>Docker and Docker Compose</li> <li>AMD64 or ARM64 CPU architecture (or build the image yourself for other architectures)</li> </ul>"},{"location":"quick-start/docker/#setup","title":"Setup","text":""},{"location":"quick-start/docker/#docker-compose","title":"Docker Compose","text":"<p>Below is a PlexAniBridge Docker compose file with example values. Optional environment variables are commented out.</p> compose.yaml<pre><code>services:\n    plexanibridge:\n        image: ghcr.io/eliasbenb/plexanibridge:v1 # :vX, :vX.Y, :vX.Y.Z, :main, :develop, :experimental, :latest\n        environment:\n            PUID: 1000\n            PGID: 1000\n            UMASK: 022\n            TZ: Etc/UTC\n            PAB_ANILIST_TOKEN: ...\n            PAB_PLEX_TOKEN: ...\n            PAB_PLEX_USER: ...\n            PAB_PLEX_URL: ...\n            # PAB_PLEX_SECTIONS: '[]'\n            # PAB_PLEX_GENRES: '[]'\n            # PAB_PLEX_METADATA_SOURCE: local\n            # PAB_SYNC_INTERVAL: 86400\n            # PAB_SYNC_MODES: '[\"periodic\", \"poll\", \"webhook\"]'\n            # PAB_FULL_SCAN: False\n            # PAB_DESTRUCTIVE_SYNC: False\n            # PAB_EXCLUDED_SYNC_FIELDS: '[\"notes\", \"score\"]'\n            # PAB_DRY_RUN: False\n            # PAB_BATCH_REQUESTS: False\n            # PAB_SEARCH_FALLBACK_THRESHOLD=-1\n            # PAB_PROFILES__example__$FIELD=$VALUE\n            # PAB_DATA_PATH: /config\n            # PAB_LOG_LEVEL: INFO\n            # PAB_MAPPINGS_URL=https://raw.githubusercontent.com/eliasbenb/PlexAniBridge-Mappings/v2/mappings.json\n            # PAB_WEB_ENABLED: True\n            # PAB_WEB_HOST: 0.0.0.0\n            # PAB_WEB_PORT: 4848\n        volumes:\n            - /path/to/plexanibridge/data:/config\n        ports:\n            - 4848:4848\n        restart: unless-stopped\n</code></pre> <p>PlexAniBridge Configuration</p> <p>Have a look at the configuration page for a detailed list of configurable environment variables.</p> <p>Docker Variables</p> <p>While configuring the Docker variables are not required, they are highly recommended to ensure proper functionality.</p> <p>Setting the <code>PUID</code> and <code>PGID</code> variables allows PlexAniBridge to run with the same permissions as the user running the container, which is important if you want to access files on the host system. You can find your user ID and group ID by running <code>id -u</code> and <code>id -g</code> in the terminal.</p> <p>The <code>UMASK</code> variable sets the default file permissions for new files created by the container. A common value is <code>022</code>, which gives read and execute permissions to everyone, but only write permissions to the owner.</p> <p>The <code>TZ</code> variable sets the timezone for the container, which is useful for logging and scheduling tasks. You can search for your timezone in the list of tz database time zones Wikipedia page.</p> <pre><code>environment:\n    PUID: 1000\n    PGID: 1000\n    UMASK: 022\n    TZ: Etc/UTC\n</code></pre> <p>To start the container, run:</p> <pre><code>docker compose -f compose.yaml up -d\n</code></pre> <p>Image Tags</p> <p>You can pin the image to a specific version or branch by changing <code>latest</code> to a specific tag. Some available tags are:</p> <ul> <li><code>latest</code>: The latest stable release</li> <li><code>beta</code>: The latest beta release (may be unstable)</li> <li><code>alpha</code>: The latest alpha release (may be unstable)</li> <li><code>vX.Y.Z</code>: A specific version from the releases page (e.g. <code>v1.0.0</code>)</li> <li><code>X.Y.Z</code>: Alias of <code>vX.Y.Z</code> (e.g. <code>1.0.0</code>)</li> <li><code>main</code>: The latest commit on the <code>main</code> branch, which is usually tied to the latest release</li> <li><code>develop</code>: The latest commit on the <code>develop</code> branch (may be unstable)</li> <li><code>experimental</code>: The latest commit on the <code>experimental</code> branch (may be unstable)</li> </ul>"},{"location":"quick-start/docker/#docker-cli","title":"Docker CLI","text":"<p>Below is a minimal example of a Docker run command with only the required variables.</p> <pre><code>docker run \\\n    --name plexanibridge \\\n    -e PUID=1000 \\\n    -e PGID=1000 \\\n    -e UMASK=022 \\\\\n    -e TZ=Etc/UTC \\\n    -e PAB_ANILIST_TOKEN=eyJ... \\\n    -e PAB_PLEX_TOKEN=2Sb... \\\n    -e PAB_PLEX_USER=username \\\n    -e PAB_PLEX_URL=http://plex:32400 \\\n    -p 4848:4848 \\\n    -v /path/to/plexanibridge/data:/config \\\n    ghcr.io/eliasbenb/plexanibridge:v1\n</code></pre>"},{"location":"quick-start/source/","title":"Source","text":""},{"location":"quick-start/source/#requirements","title":"Requirements","text":"<ul> <li>Python 3.13+</li> <li>SQLite3</li> <li>Git</li> </ul>"},{"location":"quick-start/source/#setup","title":"Setup","text":"<p>Tip</p> <p>Have a look at the configuration page for a detailed list of configurable environment variables.</p> <pre><code>git clone https://github.com/eliasbenb/PlexAniBridge.git\ncd PlexAniBridge\n\npip install -r requirements.txt\n\ncp .env.example .env # Edit the .env file\n\npython main.py\n</code></pre>"},{"location":"recovery/disaster-recovery/","title":"Disaster Recovery","text":"<p>Given that software will always be susceptible to bugs, PlexAniBridge offers multiple recovery features: daily automatic AniList backups, in-app restore, and a per\u2011sync undo capability on the timeline.</p> <p>Prevention</p> <p>Before running PlexAniBridge for the first time, it is recommended to try a dry run to see what changes will be made without actually making them. This can help you identify any potential issues before they occur.</p>"},{"location":"recovery/disaster-recovery/#backups","title":"Backups","text":"<p>PlexAniBridge creates a JSON snapshot of the current AniList list data on startup and on a daily schedule. These backups are stored under the data folder (defined in <code>PAB_DATA_PATH</code>) in the <code>backups</code> directory as JSON files named like:</p> <pre><code>plexanibridge-&lt;PROFILE_NAME&gt;.&lt;YYYYMMDDHHMMSS&gt;.json\n</code></pre> <p>You can work with these backups in two ways:</p> <ol> <li>Web UI (recommended for most cases) - browse, preview, and restore directly.</li> <li>CLI restore script (legacy, deprecated).</li> </ol> <p>Warning</p> <p>Backups are automatically deleted after 7 days (rolling retention). If you need to keep a snapshot longer, save it in a safe location.</p>"},{"location":"recovery/disaster-recovery/#viewing-restoring-backups-in-the-web-ui","title":"Viewing &amp; Restoring Backups in the Web UI","text":"<ol> <li>Open the Web UI and navigate to: Backups \u2192 select a profile.</li> <li>You will see a table of recent backups (filename, created time, size, age, detected user if available).</li> <li>Click Preview to open a highlighted JSON view (no data is changed).</li> <li>Click Restore to apply that snapshot back to AniList for the profile.</li> <li>A toast will indicate success; any individual sync outcomes will appear later on the timeline.</li> </ol> <p>Warning</p> <p>Initiating a restore will overwrite all current AniList entries for that profile. </p>"},{"location":"recovery/disaster-recovery/#restoring-from-backups-cli-script","title":"Restoring from Backups (CLI Script)","text":"<p>This method is no longer recommended for typical users; prefer the Web UI above.</p> <p>To restore from a backup without the Web UI, use the restore script in the <code>scripts</code> folder. You will need to pass the backup file and AniList token as arguments:</p>"},{"location":"recovery/disaster-recovery/#undoing-individual-sync-changes","title":"Undoing Individual Sync Changes","text":"<p>In addition to full restores, you can undo specific sync operations directly from the Timeline page.</p> <p>Each timeline entry representing a change (e.g. a creation, update, or deletion) exposes an Undo button when it is logically reversible. When clicked, PlexAniBridge applies an inverse operation to restore the previous state and creates a new timeline entry marked as <code>undone</code>.</p>"},{"location":"recovery/disaster-recovery/#undo-is-available-when","title":"Undo Is Available When","text":"Original Outcome Before State After State Meaning Undo Action synced present present Updated entry Revert to before synced null present Created entry Delete it deleted present null Deleted entry Restore it <p>Note: Undos that are supposed to cause an entry deletion will not take effect if DESTRUCTIVE_SYNC is disabled.</p>"},{"location":"web/api/","title":"API","text":"<p>The API is self documenting via the OpenAPI specification. You can explore endpoints, view schemas, and try out requests directly from either the built-in Swagger UI or Redoc interfaces (available at <code>/docs</code> and <code>/redoc</code> respectively of your PlexAniBridge deployment).</p> <p>Below is an embedded Redoc viewer for convenience. Note: the embedded viewer may not always be up to date with the live API; for the most accurate docs, visit <code>/redoc</code> directly on your PlexAniBridge instance.</p> <p></p>"},{"location":"web/backups/","title":"Backups","text":"<p>Use the backups page to browse, preview, and restore the AniList snapshots PlexAniBridge creates for you. The page has two stops: a profile picker at <code>/backups</code> and a detailed table at <code>/backups/{profile}</code>. Everything you see reflects the real files stored in <code>PAB_DATA_PATH/backups</code>, so you always know what is available.</p> <p>Note: backups are automatically deleted after 7 days (rolling retention). If you need to keep a snapshot longer, save it in a safe location.</p> <p>he profile view lists every backup with its filename, when it was created, how old it is, file size, and which AniList user it belongs to.</p> <p>Actions on each row:</p> <ul> <li><code>Preview</code> opens the backup in a modal so you can skim the JSON of your AniList backup before doing anything permanent.</li> <li><code>Restore</code> triggers the restore job, and shows a toast summarising how many entries were brought back plus any warnings.</li> </ul>"},{"location":"web/logs/","title":"Logs","text":"<p>The logs page has two tabs for real-time streaming output and archived log files. It connects to <code>/ws/logs</code> for live events and <code>/api/logs/*</code> for history.</p>"},{"location":"web/logs/#live-stream","title":"Live Stream","text":"<ul> <li>The <code>Live</code> tab subscribes to the websocket and appends new entries as they happen.</li> <li>The toolbar actions let you clear the current buffer, toggle auto-scroll, switch message wrapping, and download the in-memory log slice as a text file.</li> </ul>"},{"location":"web/logs/#log-history","title":"Log History","text":"<ul> <li>Switch to the <code>History</code> tab to browse archived log files stored on disk.</li> <li>Choose how many trailing lines to load (100\u20132000 or all).</li> <li>Wrap toggles and downloads are available here too, letting you export just the excerpt you reviewed.</li> </ul>"},{"location":"web/logs/#search-filtering","title":"Search &amp; Filtering","text":"<ul> <li>The global search box filters both live and history buffers across message text with a case-insensitive match.</li> <li>The level selector is ranked (<code>DEBUG</code> &lt; <code>INFO</code> &lt; <code>SUCCESS</code> &lt; <code>WARNING</code> &lt; <code>ERROR</code>). Selecting a level hides anything less severe so you can focus on warnings or failures.</li> </ul>"},{"location":"web/mappings/","title":"Mappings","text":"<p>The mappings page lets you browse and manage the AniList \u2194 Plex mapping database. You can search existing records with a powerful query language and manage mapping overrides.</p>"},{"location":"web/mappings/#searching-filtering","title":"Searching &amp; Filtering","text":"<ul> <li>The search bar uses the Mappings Query Language with autocomplete hints as you type.</li> <li>Some useful queries to try: <code>\"One Piece\"</code>, <code>anilist:12345</code>, <code>tvdb:67890</code>, <code>has:tvdb_mappings</code>.</li> <li>Press <code>Enter</code> or click the search icon to run a query.</li> <li>Toggle <code>Custom Only</code> to limit results to entries sourced from your custom mappings (<code>mappings.custom.(json|yaml|yml)</code>)</li> </ul>"},{"location":"web/mappings/#table-controls","title":"Table Controls","text":"<ul> <li>Column visibility can be set by clicking the eye icon popover; toggles persist in local storage.</li> <li>Drag column separators to resize widths as needed; column widths persist in local storage.</li> <li>Use <code>Show All</code>, <code>Hide All</code>, or <code>(reset)</code> inside the eye icon popover to restore the default column layout.</li> <li>Pagination controls (page navigation, per page size) sit at the foot of the table.</li> </ul>"},{"location":"web/mappings/#editing-creating-overrides","title":"Editing &amp; Creating Overrides","text":"<ul> <li><code>New Override</code> (plus icon in toolbar) opens the editor with a blank template; <code>Edit</code> in a row pre-fills fields from the current mapping.</li> <li>The override editor has two tabs: Form and Raw JSON; Form mode exposes all supported identifiers with per-field modes (<code>omit</code>, <code>null</code>, <code>value</code>) and helper controls for TMDB/TVDB season mappings.</li> <li>Switch to <code>Raw JSON</code> for a schema-backed Monaco editor that validates against the override schema. Changes sync back to the form when you return.</li> </ul>"},{"location":"web/screenshots/","title":"Screenshots","text":""},{"location":"web/screenshots/#dashboard","title":"Dashboard","text":""},{"location":"web/screenshots/#timeline","title":"Timeline","text":""},{"location":"web/screenshots/#mappings","title":"Mappings","text":""},{"location":"web/screenshots/#logs","title":"Logs","text":""},{"location":"web/screenshots/#backups","title":"Backups","text":""},{"location":"web/timeline/","title":"Timeline","text":"<p>The sync timeline gives you a live feed of Plex to AniList activity for a specific profile. It combines current sync progress, websocket updates, and stored history so you can see exactly what changed, when, and why.</p>"},{"location":"web/timeline/#header-controls","title":"Header Controls","text":"<ul> <li><code>Full Sync</code> runs a complete rescan of the selected profile.</li> <li><code>Poll Sync</code> asks the backend to poll Plex for new or recently changed items without resetting library state.</li> <li>When a sync is running the header shows stage, library section, processed counts, and a progress meter.</li> </ul>"},{"location":"web/timeline/#outcome-filters-stats","title":"Outcome Filters &amp; Stats","text":"<ul> <li>The filter cards summarise counts for <code>Synced</code>, <code>Failed</code>, <code>Not Found</code>, <code>Deleted</code>, and <code>Undone</code> outcomes.</li> <li>Click a card to filter by that outcome; click the <code>Clear</code> badge to remove the filter.</li> <li>Counts update as history entries stream in, so you can watch failures or retries in real time.</li> </ul>"},{"location":"web/timeline/#history-feed","title":"History Feed","text":"<ul> <li>New entries arrive via the <code>/ws/history/{profile}</code> websocket and appear at the top of the feed.</li> <li>Infinite scrolling loads older history as you reach the sentinel at the bottom.</li> <li>Each card displays AniList and Plex links (when available), library metadata, timestamp, and any backend error message.</li> </ul>"},{"location":"web/timeline/#entry-actions","title":"Entry Actions","text":"<ul> <li><code>Retry</code> re-queues a failed or not found item.</li> <li><code>Undo</code> reverses successful syncs by returning the AniList entry to its prior state.</li> <li><code>Delete</code> removes the history entry from the database (purely cosmetic; does not affect AniList data).</li> </ul>"},{"location":"web/timeline/#diff-viewer","title":"Diff Viewer","text":"<ul> <li>The diff viewer highlights changes between the <code>before</code> and <code>after</code> AniList states.</li> <li>The default <code>Changes</code> tab shows only modified fields with color-coded additions and deletions.</li> <li>Use the search box to filter by JSON path, show unchanged values, or switch to the side-by-side <code>Compare</code> tab for a holistic view.</li> </ul>"},{"location":"web/timeline/#pinning-controls","title":"Pinning Controls","text":"<ul> <li>Use <code>Show pins</code> on an entry to pick AniList fields that must stay untouched for that title.</li> <li>The global <code>Pins</code> button opens the pins manager, letting you search AniList titles, review every pinned record, and edit multiple entries without leaving the timeline.</li> </ul>"}]}