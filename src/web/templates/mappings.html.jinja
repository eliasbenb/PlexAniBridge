{% extends "base.html.jinja" %}
{% from "components/ui.html.jinja" import section_heading, button %}
{% block title %}
    PlexAniBridge - Mappings
{% endblock title %}
{% block content %}
    <div x-data="mappingsCrud()" x-init="init()" class="space-y-6">
        {{ section_heading('lucide:list', 'Mappings', '<span class="text-xs text-slate-400">Browse & override external ID relationships</span>') }}
        <!-- Toolbar -->
        <div class="flex flex-wrap items-center gap-2 border-b border-slate-800/70 py-1">
            <!-- Search -->
            <div class="relative flex-1 min-w-56 max-w-xl">
                <input x-model="search"
                       @keydown.enter.prevent="page=1; load(); savePrefs()"
                       placeholder="Search (AniList, TMDB, IMDB, etc)"
                       aria-label="Search mappings"
                       class="w-full h-8 bg-slate-900/70 focus:bg-slate-900 border border-slate-700/70 focus:border-slate-600 rounded-md pl-8 pr-9 text-[11px] placeholder:text-slate-500 shadow-sm" />
                <iconify-icon icon="lucide:search" class="absolute left-2.5 top-1/2 -translate-y-1/2 text-slate-500 text-[14px]"></iconify-icon>
                <button @click="page=1; load(); savePrefs()"
                        class="absolute right-1 top-1/2 -translate-y-1/2 h-6 w-6 inline-flex items-center justify-center rounded-md bg-slate-800 hover:bg-slate-700 text-slate-300"
                        aria-label="Run search">
                    <iconify-icon icon="lucide:arrow-right"></iconify-icon>
                </button>
            </div>
            <!-- Custom Only -->
            <button @click="custom_only=!custom_only; page=1; load(); savePrefs()"
                    :class="custom_only ? 'bg-emerald-600/90 hover:bg-emerald-500 text-white ring-emerald-500/40' : 'bg-slate-800 hover:bg-slate-700 text-slate-300 ring-slate-700/60'"
                    class="h-8 px-3 inline-flex items-center gap-1 rounded-md ring-1 text-[11px] font-medium">
                <iconify-icon :icon="custom_only ? 'lucide:check-square' : 'lucide:square'" class="text-current text-[14px]"></iconify-icon>
                <span>Custom Only</span>
            </button>
            <!-- Display / Columns -->
            <div class="relative" @keydown.escape.stop="displayOpen=false">
                <button @click="displayOpen=!displayOpen"
                        class="h-8 px-3 inline-flex items-center gap-1 rounded-md bg-slate-800 hover:bg-slate-700 ring-1 ring-slate-700/60 text-[11px] font-medium">
                    <iconify-icon icon="lucide:layout-grid" class="text-slate-400 text-[14px]"></iconify-icon>
                    <span>Display</span>
                </button>
                <div x-show="displayOpen"
                     x-transition.opacity
                     @click.outside="displayOpen=false"
                     class="absolute mt-1 right-0 z-30 w-72 rounded-md border border-slate-700/70 bg-slate-900/95 backdrop-blur-sm p-3 shadow-lg space-y-3">
                    <div class="flex items-center justify-between gap-3">
                        <div class="text-[10px] uppercase tracking-wide text-slate-400 font-medium">Per Page</div>
                        <select x-model.number="per_page"
                                @change="page=1; load(); savePrefs()"
                                class="h-7 bg-slate-950/70 focus:bg-slate-950 border border-slate-700/70 focus:border-slate-600 rounded-md px-2 text-[11px] shadow-sm">
                            <option>10</option>
                            <option>25</option>
                            <option>50</option>
                            <option>100</option>
                        </select>
                    </div>
                    <div class="space-y-1">
                        <div class="text-[10px] uppercase tracking-wide text-slate-400 font-medium">Columns</div>
                        <div class="grid grid-cols-2 gap-1 text-[11px]">
                            <template x-for="[key,label] in Object.entries({title:'Title',anidb:'AniDB',imdb:'IMDB',tmdb_movie:'TMDB (Movie)',tmdb_show:'TMDB (Show)',tvdb:'TVDB',mal:'MAL',seasons:'Seasons'})"
                                      :key="key">
                                <label class="flex items-center gap-1.5 px-2 py-1 rounded-md hover:bg-slate-800/70 cursor-pointer select-none">
                                    <input type="checkbox"
                                           class="accent-emerald-600"
                                           :checked="columns[key]"
                                           @change="const prev=columns[key]; columns[key]=!columns[key]; savePrefs(); if(key==='title' && !prev && columns.title) fetchAni();">
                                    <span class="truncate" x-text="label"></span>
                                </label>
                            </template>
                        </div>
                    </div>
                    <div class="flex flex-wrap gap-2 pt-1">
                        <button class="text-[11px] px-2 py-1 rounded-md bg-slate-800 hover:bg-slate-700"
                                @click="setAllColumns(true)">Show All</button>
                        <button class="text-[11px] px-2 py-1 rounded-md bg-slate-800 hover:bg-slate-700"
                                @click="setAllColumns(false)">Hide All</button>
                        <button class="text-[11px] px-2 py-1 rounded-md bg-slate-800 hover:bg-slate-700"
                                @click="resetColumns()">Reset</button>
                    </div>
                </div>
            </div>
            <div class="ml-auto">
                <button @click="openNew()"
                        class="h-8 inline-flex items-center gap-1 px-3 rounded-md bg-emerald-600/90 hover:bg-emerald-500 text-emerald-50 text-[11px] font-medium"
                        title="New Override"
                        aria-label="New Override">
                    <iconify-icon icon="lucide:plus" class="text-[14px]"></iconify-icon>
                </button>
            </div>
        </div>
        <!-- Table Container -->
        <div class="relative rounded-md border border-slate-800/70 bg-slate-900/40 backdrop-blur-sm overflow-hidden h-[70vh] flex flex-col">
            <!-- Status Bar -->
            <div class="px-3 py-2 text-[11px] flex items-center gap-4 border-b border-slate-800/60 bg-slate-950/50">
                <span class="text-slate-400">Showing <span class="text-slate-200 font-medium" x-text="items.length"></span>/<span class="text-slate-500" x-text="total"></span></span>
                <span class="text-slate-500"
                      x-text="'Page '+page+' / '+pages"
                      x-show="pages>1"></span>
                <template x-if="custom_only"><span class="text-emerald-400">Custom overrides only</span></template>
            </div>
            <div class="overflow-x-auto overflow-y-auto flex-1 scrollbar-thin">
                <table class="min-w-full text-xs align-middle">
                    <thead class="text-slate-300 bg-gradient-to-b from-slate-900/70 to-slate-900/40 sticky top-0 z-10">
                        <tr class="divide-x divide-slate-800/70 whitespace-nowrap">
                            <th class="px-3 py-2 text-left font-medium truncate"
                                x-show="columns.title">
                                <span class="block truncate">Title</span>
                            </th>
                            <th class="px-3 py-2 text-left font-medium truncate">
                                <span class="block truncate">AniList</span>
                            </th>
                            <th class="px-3 py-2 text-left font-medium truncate"
                                x-show="columns.anidb">
                                <span class="block truncate">AniDB</span>
                            </th>
                            <th class="px-3 py-2 text-left font-medium truncate"
                                x-show="columns.imdb">
                                <span class="block truncate">IMDB</span>
                            </th>
                            <th class="px-3 py-2 text-left font-medium truncate"
                                x-show="columns.tmdb_movie">
                                <span class="block truncate">TMDB (Movie)</span>
                            </th>
                            <th class="px-3 py-2 text-left font-medium truncate"
                                x-show="columns.tmdb_show">
                                <span class="block truncate">TMDB (Show)</span>
                            </th>
                            <th class="px-3 py-2 text-left font-medium truncate"
                                x-show="columns.tvdb">
                                <span class="block truncate">TVDB</span>
                            </th>
                            <th class="px-3 py-2 text-left font-medium truncate" x-show="columns.mal">
                                <span class="block truncate">MAL</span>
                            </th>
                            <th class="px-3 py-2 text-left font-medium truncate"
                                x-show="columns.seasons">
                                <span class="block truncate">Seasons</span>
                            </th>
                            <th class="px-3 py-2 text-left font-medium truncate">
                                <span class="block truncate"></span>
                            </th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-slate-800/60">
                        <template x-for="m in items" :key="m.anilist_id">
                            <tr class="hover:bg-slate-800/40 transition-colors align-top">
                                <td class="px-3 py-2 w-64" x-show="columns.title">
                                    <div class="flex items-start gap-2">
                                        <div class="w-12 shrink-0" x-show="m.anilist_id">
                                            <template x-if="mappingAni(m) && !mappingAni(m)._error && mappingAni(m)?.coverImage?.medium">
                                                <a :href="linkFor('anilist', m.anilist_id)"
                                                   target="_blank"
                                                   rel="noopener">
                                                    <img :src="mappingAni(m)?.coverImage?.medium"
                                                         :alt="aniTitle(mappingAni(m))"
                                                         width="48"
                                                         height="68"
                                                         loading="lazy"
                                                         class="w-12 h-16 object-cover rounded-md ring-1 ring-slate-700/50" />
                                                </a>
                                            </template>
                                            <template x-if="!mappingAni(m) || mappingAni(m)._error || !mappingAni(m)?.coverImage?.medium">
                                                <div class="w-12 h-16 flex items-center justify-center rounded-md bg-slate-800 text-[9px] leading-tight text-slate-500 text-center px-1 select-none">
                                                    <span x-text="mappingAni(m)?._error ? 'AniList\nError' : 'No\nCover'"></span>
                                                </div>
                                            </template>
                                        </div>
                                        <div class="min-w-0 space-y-0.5">
                                            <div class="font-medium truncate"
                                                 x-text="mappingAni(m) ? aniTitle(mappingAni(m)) : ('AniList '+(m.anilist_id||'—'))">
                                            </div>
                                            <div class="text-[10px] text-slate-500 flex flex-wrap gap-1 items-center"
                                                 x-show="mappingAni(m)">
                                                <span x-text="mappingAni(m)?.format || ''"></span>
                                                <template x-if="mappingAni(m)?.episodes">
                                                    <span>· <span x-text="mappingAni(m).episodes+'ep'"></span></span>
                                                </template>
                                                <template x-if="mappingAni(m)?.season">
                                                    <span>· <span x-text="(mappingAni(m).season||'') + ' ' + (mappingAni(m).seasonYear||'')"></span></span>
                                                </template>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-3 py-2 font-mono"
                                    x-show="m.anilist_id"
                                    x-html="fmtLinks('anilist', m.anilist_id)"></td>
                                <td class="px-3 py-2 font-mono"
                                    x-show="columns.anidb"
                                    x-html="fmtLinks('anidb', m.anidb_id)"></td>
                                <td class="px-3 py-2 font-mono"
                                    x-show="columns.imdb"
                                    x-html="fmtLinks('imdb', m.imdb_id)"></td>
                                <td class="px-3 py-2 font-mono"
                                    x-show="columns.tmdb_movie"
                                    x-html="fmtLinks('tmdb_movie', m.tmdb_movie_id)"></td>
                                <td class="px-3 py-2 font-mono"
                                    x-show="columns.tmdb_show"
                                    x-html="fmtLinks('tmdb_show', m.tmdb_show_id)"></td>
                                <td class="px-3 py-2 font-mono"
                                    x-show="columns.tvdb"
                                    x-html="fmtLinks('tvdb', m.tvdb_id)"></td>
                                <td class="px-3 py-2 font-mono"
                                    x-show="columns.mal"
                                    x-html="fmtLinks('mal', m.mal_id)"></td>
                                <td class="px-3 py-2 font-mono"
                                    x-show="columns.seasons"
                                    :title="JSON.stringify(m.tvdb_mappings)">
                                    <span x-text="fmtSeasons(m)"></span>
                                </td>
                                <td class="px-3 py-2 whitespace-nowrap align-top text-right">
                                    <div class="flex flex-col gap-1 items-end">
                                        <div class="flex gap-1">
                                            <button @click="edit(m)"
                                                    class="h-6 px-2 inline-flex items-center rounded-md bg-slate-800 hover:bg-slate-700 text-[11px] text-slate-200">
                                                Edit
                                            </button>
                                            <button @click="m.custom && remove(m)"
                                                    :disabled="!m.custom"
                                                    :title="!m.custom ? 'Not deletable: not in your custom mappings' : 'Delete mapping'"
                                                    class="h-6 px-2 inline-flex items-center rounded-md text-[11px] text-rose-200 bg-rose-700/70 hover:bg-rose-600 disabled:opacity-35 disabled:cursor-not-allowed">
                                                Del
                                            </button>
                                        </div>
                                        <button @click="toggleRaw(m)"
                                                class="text-[10px] text-sky-400 hover:text-sky-300"
                                                x-text="rawOpen[m.anilist_id] ? 'Hide JSON' : 'Show JSON'"></button>
                                    </div>
                                    <div x-show="rawOpen[m.anilist_id]"
                                         x-transition
                                         class="mt-2 text-[10px] font-mono bg-slate-950/80 border border-slate-800 rounded-md p-2 max-h-40 overflow-auto w-80 text-left">
                                        <pre class="whitespace-pre-wrap" x-text="JSON.stringify(m, null, 2)"></pre>
                                    </div>
                                </td>
                            </tr>
                        </template>
                        <tr x-show="!items.length">
                            <td colspan="10" class="py-8 text-center text-slate-500">No mappings found</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <!-- Pagination -->
        <div class="flex flex-wrap gap-2 items-center text-xs" x-show="pages>1">
            <button @click="page>1 && (page--, load())"
                    :disabled="page===1"
                    class="px-3 py-1.5 rounded-md bg-slate-800 hover:bg-slate-700 disabled:opacity-40 disabled:cursor-not-allowed">
                Prev
            </button>
            <div class="flex items-center gap-1 px-2 py-1 rounded-md bg-slate-800/60">
                Page
                <input type="number"
                       min="1"
                       :max="pages"
                       x-model.number="page"
                       @change="load()"
                       class="w-12 px-1 py-0.5 rounded-md bg-slate-900 border border-slate-700 text-center text-xs font-semibold [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none" />
                / <span x-text="pages"></span>
            </div>
            <button @click="page<pages && (page++, load())"
                    :disabled="page===pages"
                    class="px-3 py-1.5 rounded-md bg-slate-800 hover:bg-slate-700 disabled:opacity-40 disabled:cursor-not-allowed">
                Next
            </button>
        </div>
        <!-- Modal -->
        <div x-show="modal"
             x-transition.opacity
             @click.self="modal=false"
             class="fixed inset-0 z-40 flex items-center justify-center p-4 bg-black/70 backdrop-blur-sm">
            <div class="relative w-full max-w-lg bg-slate-900/95 border border-slate-700/70 rounded-md shadow-xl ring-1 ring-slate-700/40 overflow-hidden">
                <div class="p-4 space-y-3">
                    <div class="flex items-start justify-between gap-4">
                        <h3 class="text-sm font-semibold tracking-wide flex items-center gap-2">
                            <iconify-icon icon="lucide:edit-3" class="text-slate-400" inline></iconify-icon>
                            <span x-text="form._isNew ? 'New Override' : ('Edit Override #'+form.anilist_id)"></span>
                        </h3>
                        <button @click="modal=false" class="text-slate-400 hover:text-slate-200">
                            <iconify-icon icon="lucide:x" class="text-slate-400"></iconify-icon>
                        </button>
                    </div>
                    <div class="space-y-2">
                        <div class="flex items-center gap-2">
                            <label class="text-[11px] text-slate-400">AniList ID</label>
                            <input x-model.number="form.anilist_id"
                                   type="number"
                                   class="flex-1 h-8 w-full bg-slate-950/80 focus:bg-slate-950 border border-slate-800 focus:border-slate-600 rounded-md px-2 text-[11px] shadow-sm" />
                        </div>
                        <textarea x-model="formRaw"
                                  class="w-full h-56 resize-none bg-slate-950/80 focus:bg-slate-950 border border-slate-800 focus:border-slate-600 rounded-md p-2 font-mono text-[11px] leading-tight shadow-inner"></textarea>
                    </div>
                    <div class="flex justify-end gap-2 pt-1">
                        <button @click="modal=false"
                                class="px-3 py-1.5 rounded-md bg-slate-800 hover:bg-slate-700 text-sm">Cancel</button>
                        <button @click="save()"
                                class="px-3 py-1.5 rounded-md bg-emerald-600/90 hover:bg-emerald-500 text-sm font-medium">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        function mappingsCrud() {
            return {
                items: [],
                total: 0,
                page: 1,
                pages: 1,
                per_page: 25,
                search: "{{ search or '' }}",
                custom_only: false,
                modal: false,
                columnsOpen: false,
                form: {},
                formRaw: '',
                media: {},
                rawOpen: {},
                columns: {
                    title: true,
                    anidb: true,
                    imdb: true,
                    tmdb_movie: true,
                    tmdb_show: true,
                    tvdb: true,
                    mal: true,
                    seasons: true,
                },
                displayOpen: false,
                init() {
                    this.loadPrefs();
                    this.load();
                },
                toast(msg, level = 'error') {
                    try {
                        if (window.notify && notify.toast) notify.toast(msg, level);
                    } catch (_) {}
                },
                load() {
                    const p = new URLSearchParams({
                        page: this.page,
                        per_page: this.per_page
                    });
                    if (this.search) p.set('search', this.search);
                    if (this.custom_only) p.set('custom_only', 'true');
                    fetch('/api/mappings?' + p)
                        .then(r => r.ok ? r.json() : Promise.reject(new Error('HTTP ' + r.status)))
                        .then(d => {
                            this.items = d.items;
                            this.total = d.total ?? (d.pages * this.per_page);
                            this.pages = d.pages;
                            this.page = d.page;
                            // Only fetch AniList data if title column is visible
                            if (this.columns.title) this.fetchAni();
                        })
                        .catch(e => this.toast('Failed to load mappings: ' + (e?.message || e)));
                },
                savePrefs() {
                    try {
                        localStorage.setItem('mappings.columns', JSON.stringify(this.columns));
                        localStorage.setItem('mappings.per_page', String(this.per_page));
                        localStorage.setItem('mappings.search', this.search || '');
                        localStorage.setItem('mappings.custom_only', this.custom_only ? '1' : '0');
                    } catch (_) {}
                },
                loadPrefs() {
                    try {
                        const cols = JSON.parse(localStorage.getItem('mappings.columns') || 'null');
                        if (cols && typeof cols === 'object') this.columns = {
                            ...this.columns,
                            ...cols
                        };
                        const pp = parseInt(localStorage.getItem('mappings.per_page') || '0');
                        if (pp) this.per_page = pp;
                        const s = localStorage.getItem('mappings.search');
                        if (typeof s === 'string') this.search = s;
                        const co = localStorage.getItem('mappings.custom_only');
                        if (co === '1') this.custom_only = true;
                    } catch (_) {}
                },
                setAllColumns(v) {
                    const prevTitle = this.columns.title;
                    for (const k of Object.keys(this.columns)) this.columns[k] = !!v;
                    this.savePrefs();
                    if (!prevTitle && this.columns.title) this.fetchAni();
                },
                resetColumns() {
                    const prevTitle = this.columns.title;
                    this.columns = {
                        title: true,
                        anidb: true,
                        imdb: true,
                        tmdb_movie: true,
                        tmdb_show: true,
                        tvdb: true,
                        mal: true,
                        seasons: true
                    };
                    this.savePrefs();
                    if (!prevTitle && this.columns.title) this.fetchAni();
                },
                openNew() {
                    this.form = {
                        anilist_id: null,
                        _isNew: true
                    };
                    this.formRaw = JSON.stringify({}, null, 2);
                    this.modal = true;
                },
                edit(m) {
                    // Clone and strip UI-only / computed fields ('custom') before editing
                    const clone = JSON.parse(JSON.stringify(m));
                    delete clone.custom;
                    // Extract the AniList id into its own field and remove from raw JSON
                    const aid = clone.anilist_id ?? clone.id ?? null;
                    delete clone.anilist_id;
                    delete clone.id;
                    this.form = {
                        anilist_id: aid,
                        _isNew: false
                    };
                    this.formRaw = JSON.stringify(clone, null, 2);
                    this.modal = true;
                },
                save() {
                    try {
                        const obj = JSON.parse(this.formRaw || '{}');
                        delete obj.custom;
                        const aid = this.form.anilist_id ?? null;
                        if (!aid) {
                            alert('anilist_id is required');
                            return;
                        }
                        obj.anilist_id = aid;
                        const method = this.form._isNew ? 'POST' : 'PUT';
                        const url = this.form._isNew ? '/api/mappings' : '/api/mappings/' + aid;
                        fetch(url, {
                                method,
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(obj)
                            })
                            .then(r => r.ok ? r.json() : Promise.reject())
                            .then(() => {
                                this.modal = false;
                                this.load();
                            })
                            .catch(() => this.toast('Save failed'));
                    } catch {
                        alert('Invalid JSON');
                    }
                },
                remove(m) {
                    if (!confirm('Delete override for AniList ' + m.anilist_id + '?')) return;
                    fetch('/api/mappings/' + m.anilist_id, {
                            method: 'DELETE'
                        })
                        .then(r => {
                            if (!r.ok) throw new Error('HTTP ' + r.status);
                        })
                        .then(() => this.load())
                        .catch(e => this.toast('Delete failed: ' + (e?.message || e)));
                },
                extractAniId(m) {
                    return m.anilist_id || null;
                },
                fetchAni() {
                    if (!this.columns.title) return; // safety guard
                    const ids = [...new Set(this.items.map(m => this.extractAniId(m)).filter(Boolean))];
                    const missing = ids.filter(id => !this.media[id]);
                    if (!missing.length) return;
                    AniList.fetch(missing).then(data => {
                        this.media = {
                            ...this.media,
                            ...data
                        };
                    });
                },
                mappingAni(m) {
                    const id = this.extractAniId(m);
                    return id ? this.media[id] : null;
                },
                aniTitle(a) {
                    try {
                        const t = (window.AniList && typeof AniList.getTitle === 'function') ? AniList.getTitle(a, null) : null;
                        return t || ('#' + a.id);
                    } catch {
                        return '#' + a.id;
                    }
                },
                linkFor(type, id) {
                    if (id === null || id === undefined || id === '') return null;
                    const val = String(id);
                    switch (type) {
                        case 'anilist':
                            return `https://anilist.co/anime/${val}`;
                        case 'anidb':
                            return `https://anidb.net/anime/${val}`;
                        case 'imdb':
                            const imdb = val.startsWith('tt') ? val : `tt${val}`;
                            return `https://www.imdb.com/title/${imdb}/`;
                        case 'tmdb_movie':
                            return `https://www.themoviedb.org/movie/${val}`;
                        case 'tmdb_show':
                            return `https://www.themoviedb.org/tv/${val}`;
                        case 'tvdb':
                            return `https://thetvdb.com/?tab=series&id=${val}`;
                        case 'mal':
                            return `https://myanimelist.net/anime/${val}`;
                        default:
                            return null;
                    }
                },
                fmtLinks(type, value) {
                    const toAnchor = (v) => {
                        const url = this.linkFor(type, v);
                        const txt = String(v);
                        return url ? `<a href="${url}" target="_blank" rel="noopener" class="text-emerald-400 hover:underline">${txt}</a>` : txt;
                    };
                    if (value === null || value === undefined || (Array.isArray(value) && !value.length)) return '-';
                    if (Array.isArray(value)) return value.map(toAnchor).join(',');
                    return toAnchor(value);
                },
                toggleRaw(m) {
                    this.rawOpen[m.anilist_id] = !this.rawOpen[m.anilist_id];
                },
                fmtSeasons(m) {
                    return Object.keys(m.tvdb_mappings || {}).length;
                }
            }
        }
    </script>
{% endblock content %}
