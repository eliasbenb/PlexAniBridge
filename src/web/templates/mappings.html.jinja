{% extends "base.html.jinja" %}
{% from "components/ui.html.jinja" import section_heading %}
{% block title %}
    PlexAniBridge - Mappings
{% endblock title %}
{% block content %}
    <div x-data="Mappings()" x-init="init()" class="space-y-6">
        {{ section_heading('lucide:list', 'Mappings', '<span class="text-xs text-slate-400">Browse & override external ID relationships</span>') }}
        <!-- Toolbar -->
        <div class="flex flex-wrap items-center gap-2 border-b border-slate-800/70 py-1">
            <!-- Search -->
            <div class="relative flex-1 min-w-56 max-w-xl">
                <input x-model="query"
                       @keydown.enter.prevent="page=1; load()"
                       placeholder="Search (AniList, TMDB, IMDB, etc)"
                       aria-label="Search mappings"
                       class="w-full h-8 bg-slate-900/70 focus:bg-slate-900 border border-slate-700/70 focus:border-slate-600 rounded-md pl-8 pr-9 text-[11px] placeholder:text-slate-500 shadow-sm" />
                <iconify-icon icon="lucide:search" class="absolute left-2.5 top-1/2 -translate-y-1/2 text-slate-500 text-[14px]"></iconify-icon>
                <button @click="page=1; load()"
                        class="absolute right-1 top-1/2 -translate-y-1/2 h-6 w-6 inline-flex items-center justify-center rounded-md bg-slate-800 hover:bg-slate-700 text-slate-300"
                        aria-label="Run search">
                    <iconify-icon icon="lucide:arrow-right"></iconify-icon>
                </button>
            </div>
            <!-- Custom Only -->
            <button @click="customOnly=!customOnly; page=1; load()"
                    :class="customOnly ? 'bg-emerald-600/90 hover:bg-emerald-500 text-white ring-emerald-500/40' : 'bg-slate-800 hover:bg-slate-700 text-slate-300 ring-slate-700/60'"
                    class="h-8 px-3 inline-flex items-center gap-1 rounded-md ring-1 text-[11px] font-medium">
                <iconify-icon :icon="customOnly ? 'lucide:check-square' : 'lucide:square'" class="text-current text-[14px]"></iconify-icon>
                <span>Custom Only</span>
            </button>
            <!-- Per page -->
            <div class="flex items-center gap-2 ml-auto">
                <label class="text-[11px] text-slate-400">Per Page</label>
                <select x-model.number="perPage"
                        @change="page=1; load()"
                        class="h-8 bg-slate-950/70 focus:bg-slate-950 border border-slate-700/70 focus:border-slate-600 rounded-md px-2 text-[11px] shadow-sm">
                    <option>10</option>
                    <option>25</option>
                    <option>50</option>
                    <option>100</option>
                </select>
                <button @click="openNew()"
                        class="h-8 inline-flex items-center gap-1 px-3 rounded-md bg-emerald-600/90 hover:bg-emerald-500 text-emerald-50 text-[11px] font-medium"
                        title="New Override"
                        aria-label="New Override">
                    <iconify-icon icon="lucide:plus" class="text-[14px]"></iconify-icon>
                </button>
            </div>
        </div>
        <!-- Table Container -->
        <div class="relative rounded-md border border-slate-800/70 bg-slate-900/40 backdrop-blur-sm overflow-hidden h-[70vh] flex flex-col">
            <!-- Status Bar -->
            <div class="px-3 py-2 text-[11px] flex items-center gap-4 border-b border-slate-800/60 bg-slate-950/50">
                <span class="text-slate-400">Showing <span class="text-slate-200 font-medium" x-text="items.length"></span>/<span class="text-slate-500" x-text="total"></span></span>
                <span class="text-slate-500"
                      x-text="'Page '+page+' / '+pages"
                      x-show="pages>1"></span>
                <template x-if="customOnly"><span class="text-emerald-400">Custom overrides only</span></template>
            </div>
            <div class="overflow-x-auto overflow-y-auto flex-1 scrollbar-thin">
                <table class="min-w-full text-xs align-middle">
                    <thead class="text-slate-300 bg-gradient-to-b from-slate-900/70 to-slate-900/40 sticky top-0 z-10">
                        <tr class="divide-x divide-slate-800/70 whitespace-nowrap">
                            <th class="px-3 py-2 text-left font-medium truncate">Title</th>
                            <th class="px-3 py-2 text-left font-medium truncate">AniList</th>
                            <th class="px-3 py-2 text-left font-medium truncate">AniDB</th>
                            <th class="px-3 py-2 text-left font-medium truncate">IMDB</th>
                            <th class="px-3 py-2 text-left font-medium truncate">TMDB (Movie)</th>
                            <th class="px-3 py-2 text-left font-medium truncate">TMDB (Show)</th>
                            <th class="px-3 py-2 text-left font-medium truncate">TVDB</th>
                            <th class="px-3 py-2 text-left font-medium truncate">MAL</th>
                            <th class="px-3 py-2 text-left font-medium truncate">Seasons</th>
                            <th class="px-3 py-2 text-right font-medium truncate">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-slate-800/60">
                        <template x-for="m in items" :key="m.anilist_id || m.id">
                            <tr class="hover:bg-slate-800/40 transition-colors align-top">
                                <td class="px-3 py-2 w-64">
                                    <div class="flex items-start gap-2">
                                        <div class="w-12 shrink-0" x-show="m.anilist_id">
                                            <template x-if="mappingAni(m) && !mappingAni(m)._error && mappingAni(m)?.coverImage?.medium">
                                                <a :href="linkFor('anilist', m.anilist_id)"
                                                   target="_blank"
                                                   rel="noopener">
                                                    <img :src="mappingAni(m)?.coverImage?.medium"
                                                         :alt="aniTitle(mappingAni(m))"
                                                         width="48"
                                                         height="68"
                                                         loading="lazy"
                                                         class="w-12 h-16 object-cover rounded-md ring-1 ring-slate-700/50" />
                                                </a>
                                            </template>
                                            <template x-if="!mappingAni(m) || mappingAni(m)._error || !mappingAni(m)?.coverImage?.medium">
                                                <div class="w-12 h-16 flex items-center justify-center rounded-md bg-slate-800 text-[9px] leading-tight text-slate-500 text-center px-1 select-none">
                                                    <span x-text="mappingAni(m)?._error ? 'AniList\nError' : 'No\nCover'"></span>
                                                </div>
                                            </template>
                                        </div>
                                        <div class="min-w-0 space-y-0.5">
                                            <div class="font-medium truncate"
                                                 x-text="mappingAni(m) ? aniTitle(mappingAni(m)) : ('AniList '+(m.anilist_id||'—'))">
                                            </div>
                                            <div class="text-[10px] text-slate-500 flex flex-wrap gap-1 items-center"
                                                 x-show="mappingAni(m)">
                                                <span x-text="mappingAni(m)?.format || ''"></span>
                                                <template x-if="mappingAni(m)?.episodes"><span>· <span x-text="mappingAni(m).episodes+'ep'"></span></span></template>
                                                <template x-if="mappingAni(m)?.season"><span>· <span x-text="(mappingAni(m).season||'') + ' ' + (mappingAni(m).seasonYear||'')"></span></span></template>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-3 py-2 font-mono"
                                    x-html="fmtLinks('anilist', m.anilist_id)"></td>
                                <td class="px-3 py-2 font-mono" x-html="fmtLinks('anidb', m.anidb_id)"></td>
                                <td class="px-3 py-2 font-mono" x-html="fmtLinks('imdb', m.imdb_id)"></td>
                                <td class="px-3 py-2 font-mono"
                                    x-html="fmtLinks('tmdb_movie', m.tmdb_movie_id)"></td>
                                <td class="px-3 py-2 font-mono"
                                    x-html="fmtLinks('tmdb_show', m.tmdb_show_id)"></td>
                                <td class="px-3 py-2 font-mono" x-html="fmtLinks('tvdb', m.tvdb_id)"></td>
                                <td class="px-3 py-2 font-mono" x-html="fmtLinks('mal', m.mal_id)"></td>
                                <td class="px-3 py-2 font-mono" :title="JSON.stringify(m.tvdb_mappings)">
                                    <span x-text="fmtSeasons(m)"></span>
                                </td>
                                <td class="px-3 py-2 whitespace-nowrap align-top text-right">
                                    <div class="flex flex-col gap-1 items-end">
                                        <div class="flex gap-1">
                                            <button @click="openEdit(m)"
                                                    class="h-6 px-2 inline-flex items-center rounded-md bg-slate-800 hover:bg-slate-700 text-[11px] text-slate-200">
                                                Edit
                                            </button>
                                            <button @click="remove(m)"
                                                    :disabled="m.custom===false"
                                                    :title="m.custom===false ? 'Not deletable: not in your custom mappings' : 'Delete mapping'"
                                                    class="h-6 px-2 inline-flex items-center rounded-md text-[11px] text-rose-200 bg-rose-700/70 hover:bg-rose-600 disabled:opacity-35 disabled:cursor-not-allowed">
                                                Del
                                            </button>
                                        </div>
                                        <button @click="toggleRaw(m)"
                                                class="text-[10px] text-sky-400 hover:text-sky-300"
                                                x-text="rawOpen[m.anilist_id] ? 'Hide JSON' : 'Show JSON'"></button>
                                    </div>
                                    <div x-show="rawOpen[m.anilist_id]"
                                         x-transition
                                         class="mt-2 text-[10px] font-mono bg-slate-950/80 border border-slate-800 rounded-md p-2 max-h-40 overflow-auto w-80 text-left">
                                        <pre class="whitespace-pre-wrap" x-text="JSON.stringify(m, null, 2)"></pre>
                                    </div>
                                </td>
                            </tr>
                        </template>
                        <tr x-show="!items.length">
                            <td colspan="10" class="py-8 text-center text-slate-500">No mappings found</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <!-- Pagination -->
        <div class="flex flex-wrap gap-2 items-center text-xs" x-show="pages>1">
            <button @click="page > 1 && (page--, load())"
                    :disabled="page===1"
                    class="px-3 py-1.5 rounded-md bg-slate-800 hover:bg-slate-700 disabled:opacity-40 disabled:cursor-not-allowed">
                Prev
            </button>
            <div class="flex items-center gap-1 px-2 py-1 rounded-md bg-slate-800/60">
                Page
                <input type="number"
                       min="1"
                       :max="pages"
                       x-model.number="page"
                       @change="load()"
                       class="w-12 px-1 py-0.5 rounded-md bg-slate-900 border border-slate-700 text-center text-xs font-semibold [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none" />
                / <span x-text="pages"></span>
            </div>
            <button @click="page < pages && (page++, load())"
                    :disabled="page===pages"
                    class="px-3 py-1.5 rounded-md bg-slate-800 hover:bg-slate-700 disabled:opacity-40 disabled:cursor-not-allowed">
                Next
            </button>
        </div>
        <!-- Modal -->
        <div x-show="modal"
             x-transition.opacity
             @click.self="modal=false"
             class="fixed inset-0 z-40 flex items-center justify-center p-4 bg-black/70 backdrop-blur-sm">
            <div class="relative w-full max-w-lg bg-slate-900/95 border border-slate-700/70 rounded-md shadow-xl ring-1 ring-slate-700/40 overflow-hidden">
                <div class="p-4 space-y-3">
                    <div class="flex items-start justify-between gap-4">
                        <h3 class="text-sm font-semibold tracking-wide flex items-center gap-2">
                            <iconify-icon icon="lucide:edit-3" class="text-slate-400" inline></iconify-icon>
                            <span x-text="form._isNew ? 'New Override' : ('Edit Override #'+form.anilist_id)"></span>
                        </h3>
                        <button @click="modal=false" class="text-slate-400 hover:text-slate-200">
                            <iconify-icon icon="lucide:x" class="text-slate-400"></iconify-icon>
                        </button>
                    </div>
                    <div class="space-y-2">
                        <div class="flex items-center gap-2">
                            <label class="text-[11px] text-slate-400">AniList ID</label>
                            <input x-model="form.anilist_id"
                                   :disabled="!form._isNew"
                                   type="number"
                                   class="flex-1 h-8 w-full bg-slate-950/80 focus:bg-slate-950 border border-slate-800 focus:border-slate-600 rounded-md px-2 text-[11px] shadow-sm disabled:opacity-60 disabled:cursor-not-allowed" />
                        </div>
                        <div class="grid grid-cols-2 gap-3">
                            <div>
                                <div class="flex items-center justify-between">
                                    <label class="text-[11px] text-slate-400">AniDB ID</label>
                                    <select x-model="form.anidb_mode"
                                            class="h-7 px-2 rounded-md bg-slate-900 border border-slate-700 text-[11px]">
                                        <option value="omit">Omit</option>
                                        <option value="null">Null</option>
                                        <option value="value">Value</option>
                                    </select>
                                </div>
                                <input x-model="form.anidb_id"
                                       :disabled="form.anidb_mode!=='value'"
                                       type="number"
                                       class="w-full h-8 bg-slate-950/80 border border-slate-800 rounded-md px-2 text-[11px] mt-1 disabled:opacity-60 disabled:cursor-not-allowed" />
                            </div>
                            <div>
                                <div class="flex items-center justify-between">
                                    <label class="text-[11px] text-slate-400">TVDB ID</label>
                                    <select x-model="form.tvdb_mode"
                                            class="h-7 px-2 rounded-md bg-slate-900 border border-slate-700 text-[11px]">
                                        <option value="omit">Omit</option>
                                        <option value="null">Null</option>
                                        <option value="value">Value</option>
                                    </select>
                                </div>
                                <input x-model="form.tvdb_id"
                                       :disabled="form.tvdb_mode!=='value'"
                                       type="number"
                                       class="w-full h-8 bg-slate-950/80 border border-slate-800 rounded-md px-2 text-[11px] mt-1 disabled:opacity-60 disabled:cursor-not-allowed" />
                            </div>
                            <div class="col-span-2">
                                <div class="flex items-center justify-between">
                                    <label class="text-[11px] text-slate-400">
                                        IMDB IDs <span class="text-xs text-slate-500">(comma separated)</span>
                                    </label>
                                    <select x-model="form.imdb_mode"
                                            class="h-7 px-2 rounded-md bg-slate-900 border border-slate-700 text-[11px]">
                                        <option value="omit">Omit</option>
                                        <option value="null">Null</option>
                                        <option value="value">Value</option>
                                    </select>
                                </div>
                                <input x-model="form.imdb_csv"
                                       :disabled="form.imdb_mode!=='value'"
                                       type="text"
                                       class="w-full h-8 bg-slate-950/80 border border-slate-800 rounded-md px-2 text-[11px] mt-1 disabled:opacity-60 disabled:cursor-not-allowed" />
                            </div>
                            <div>
                                <div class="flex items-center justify-between">
                                    <label class="text-[11px] text-slate-400">
                                        MAL IDs <span class="text-xs text-slate-500">(comma separated)</span>
                                    </label>
                                    <select x-model="form.mal_mode"
                                            class="h-7 px-2 rounded-md bg-slate-900 border border-slate-700 text-[11px]">
                                        <option value="omit">Omit</option>
                                        <option value="null">Null</option>
                                        <option value="value">Value</option>
                                    </select>
                                </div>
                                <input x-model="form.mal_csv"
                                       :disabled="form.mal_mode!=='value'"
                                       type="text"
                                       class="w-full h-8 bg-slate-950/80 border border-slate-800 rounded-md px-2 text-[11px] mt-1 disabled:opacity-60 disabled:cursor-not-allowed" />
                            </div>
                            <div>
                                <div class="flex items-center justify-between">
                                    <label class="text-[11px] text-slate-400">
                                        TMDB (Movie) IDs <span class="text-xs text-slate-500">(comma separated)</span>
                                    </label>
                                    <select x-model="form.tmdb_movie_mode"
                                            class="h-7 px-2 rounded-md bg-slate-900 border border-slate-700 text-[11px]">
                                        <option value="omit">Omit</option>
                                        <option value="null">Null</option>
                                        <option value="value">Value</option>
                                    </select>
                                </div>
                                <input x-model="form.tmdb_movie_csv"
                                       :disabled="form.tmdb_movie_mode!=='value'"
                                       type="text"
                                       class="w-full h-8 bg-slate-950/80 border border-slate-800 rounded-md px-2 text-[11px] mt-1 disabled:opacity-60 disabled:cursor-not-allowed" />
                            </div>
                            <div>
                                <div class="flex items-center justify-between">
                                    <label class="text-[11px] text-slate-400">
                                        TMDB (Show) IDs <span class="text-xs text-slate-500">(comma separated)</span>
                                    </label>
                                    <select x-model="form.tmdb_show_mode"
                                            class="h-7 px-2 rounded-md bg-slate-900 border border-slate-700 text-[11px]">
                                        <option value="omit">Omit</option>
                                        <option value="null">Null</option>
                                        <option value="value">Value</option>
                                    </select>
                                </div>
                                <input x-model="form.tmdb_show_csv"
                                       :disabled="form.tmdb_show_mode!=='value'"
                                       type="text"
                                       class="w-full h-8 bg-slate-950/80 border border-slate-800 rounded-md px-2 text-[11px] mt-1 disabled:opacity-60 disabled:cursor-not-allowed" />
                            </div>
                            <div class="col-span-2">
                                <div class="flex items-center justify-between">
                                    <label class="text-[11px] text-slate-400">TVDB Season Mappings</label>
                                    <div class="flex items-center gap-2">
                                        <select x-model="form.tvdb_map_mode"
                                                class="h-7 px-2 rounded-md bg-slate-900 border border-slate-700 text-[11px]">
                                            <option value="omit">Omit</option>
                                            <option value="null">Null</option>
                                            <option value="value">Value</option>
                                        </select>
                                        <button @click.prevent="addTvdbRow()"
                                                :disabled="form.tvdb_map_mode!=='value'"
                                                class="text-[11px] px-2 py-1 rounded-md bg-slate-800 hover:bg-slate-700 disabled:opacity-40 disabled:cursor-not-allowed">
                                            Add
                                        </button>
                                    </div>
                                </div>
                                <template x-for="(row, idx) in form.tvdb_mappings" :key="idx">
                                    <div class="flex items-center gap-2 mt-2">
                                        <input x-model="row.season"
                                               :disabled="form.tvdb_map_mode!=='value'"
                                               placeholder="season (e.g. s1 or 1)"
                                               class="w-28 h-8 bg-slate-950/80 border border-slate-800 rounded-md px-2 text-[11px] disabled:opacity-40 disabled:cursor-not-allowed" />
                                        <input x-model="row.pattern"
                                               :disabled="form.tvdb_map_mode!=='value'"
                                               placeholder="pattern (e.g. e1-e12|2)"
                                               class="flex-1 h-8 bg-slate-950/80 border border-slate-800 rounded-md px-2 text-[11px] disabled:opacity-40 disabled:cursor-not-allowed" />
                                        <button @click.prevent="form.tvdb_mappings.splice(idx,1)"
                                                :disabled="form.tvdb_map_mode!=='value'"
                                                class="text-[11px] px-2 py-1 rounded-md bg-rose-700/90 hover:bg-rose-600 text-white disabled:opacity-40 disabled:cursor-not-allowed">
                                            Rem
                                        </button>
                                    </div>
                                </template>
                                <div class="text-[10px] text-slate-500 mt-4">
                                    <p>Omit: leaves field unchanged; allows for inheritance from upstream mappings.</p>
                                    <p>Null: explicitly clears the field and sets it to null.</p>
                                    <p>Value: provides a specific value for a manual override.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="flex justify-end gap-2 pt-1">
                        <button @click="modal=false"
                                class="px-3 py-1.5 rounded-md bg-slate-800 hover:bg-slate-700 text-sm">Cancel</button>
                        <button @click="save()"
                                class="px-3 py-1.5 rounded-md bg-emerald-600/90 hover:bg-emerald-500 text-sm font-medium">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        function Mappings() {
            return {
                items: [],
                total: 0,
                page: 1,
                pages: 1,
                perPage: 25,
                query: "{{ search or '' }}",
                customOnly: false,
                loading: false,
                modal: false,
                form: {},
                media: {},
                rawOpen: {},

                init() {
                    this.load();
                },

                async load() {
                    this.loading = true;
                    const p = new URLSearchParams({
                        page: this.page,
                        per_page: this.perPage
                    });
                    if (this.query) p.set('search', this.query);
                    if (this.customOnly) p.set('custom_only', 'true');
                    try {
                        const r = await fetch('/api/mappings?' + p.toString());
                        if (!r.ok) throw new Error('HTTP ' + r.status);
                        const d = await r.json();
                        this.items = d.items || [];
                        this.total = d.total ?? (d.pages * this.perPage) ?? this.items.length;
                        this.pages = d.pages ?? 1;
                        this.page = d.page ?? this.page;
                        this.fetchAni();
                    } catch (e) {
                        console.error(e);
                        alert('Failed to load mappings');
                    } finally {
                        this.loading = false;
                    }
                },

                // CRUD
                openNew() {
                    this.form = this._emptyForm();
                    this.modal = true;
                },
                openEdit(m) {
                    const f = this._emptyForm();
                    f._isNew = false;
                    f.anilist_id = m.anilist_id ?? '';
                    // scalar modes
                    if ('anidb_id' in m) {
                        f.anidb_mode = m.anidb_id === null ? 'null' : 'value';
                        f.anidb_id = m.anidb_id ?? '';
                    } else {
                        f.anidb_mode = 'omit';
                    }
                    if ('tvdb_id' in m) {
                        f.tvdb_mode = m.tvdb_id === null ? 'null' : 'value';
                        f.tvdb_id = m.tvdb_id ?? '';
                    } else {
                        f.tvdb_mode = 'omit';
                    }
                    f.imdb_csv = Array.isArray(m.imdb_id) ? m.imdb_id.join(',') : (m.imdb_id || '');
                    f.imdb_mode = ('imdb_id' in m) ? (m.imdb_id === null ? 'null' : 'value') : 'omit';
                    f.mal_csv = Array.isArray(m.mal_id) ? m.mal_id.join(',') : (m.mal_id || '');
                    f.mal_mode = ('mal_id' in m) ? (m.mal_id === null ? 'null' : 'value') : 'omit';
                    f.tmdb_movie_csv = Array.isArray(m.tmdb_movie_id) ? m.tmdb_movie_id.join(',') : (m.tmdb_movie_id || '');
                    f.tmdb_movie_mode = ('tmdb_movie_id' in m) ? (m.tmdb_movie_id === null ? 'null' : 'value') : 'omit';
                    f.tmdb_show_csv = Array.isArray(m.tmdb_show_id) ? m.tmdb_show_id.join(',') : (m.tmdb_show_id || '');
                    f.tmdb_show_mode = ('tmdb_show_id' in m) ? (m.tmdb_show_id === null ? 'null' : 'value') : 'omit';
                    if (m.tvdb_mappings && typeof m.tvdb_mappings === 'object') {
                        for (const [season, pattern] of Object.entries(m.tvdb_mappings)) {
                            f.tvdb_mappings.push({
                                season,
                                pattern
                            });
                        }
                        f.tvdb_map_mode = 'value';
                    } else if ('tvdb_mappings' in m && m.tvdb_mappings === null) {
                        f.tvdb_map_mode = 'null';
                    } else {
                        f.tvdb_map_mode = 'omit';
                    }
                    this.form = f;
                    this.modal = true;
                },
                async save() {
                    const aid = Number(this.form.anilist_id);
                    if (!aid || Number.isNaN(aid)) {
                        alert('AniList ID is required');
                        return;
                    }
                    const payload = this._toPayload(this.form);
                    const isNew = this.form._isNew;
                    const url = isNew ? '/api/mappings' : '/api/mappings/' + aid;
                    const method = isNew ? 'POST' : 'PUT';
                    try {
                        const r = await fetch(url, {
                            method,
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(payload)
                        });
                        if (!r.ok) throw new Error('HTTP ' + r.status);
                        this.modal = false;
                        this.load();
                    } catch (e) {
                        console.error(e);
                        alert('Save failed');
                    }
                },
                async remove(m) {
                    if (!confirm('Delete override for AniList ' + m.anilist_id + '?')) return;
                    try {
                        const r = await fetch('/api/mappings/' + m.anilist_id, {
                            method: 'DELETE'
                        });
                        if (!r.ok) throw new Error('HTTP ' + r.status);
                        this.load();
                    } catch (e) {
                        console.error(e);
                        alert('Delete failed');
                    }
                },
                _emptyForm() {
                    return {
                        _isNew: true,
                        anilist_id: '',
                        // scalars
                        anidb_mode: 'omit',
                        anidb_id: '',
                        tvdb_mode: 'omit',
                        tvdb_id: '',
                        // arrays
                        imdb_mode: 'omit',
                        imdb_csv: '',
                        mal_mode: 'omit',
                        mal_csv: '',
                        tmdb_movie_mode: 'omit',
                        tmdb_movie_csv: '',
                        tmdb_show_mode: 'omit',
                        tmdb_show_csv: '',
                        // tvdb mappings
                        tvdb_map_mode: 'omit',
                        tvdb_mappings: []
                    };
                },
                addTvdbRow() {
                    this.form.tvdb_mappings.push({
                        season: '',
                        pattern: ''
                    });
                },
                _toPayload(f) {
                    const toInt = (v) => {
                        if (v === null || v === undefined || v === '') return null;
                        const n = Number(v);
                        return Number.isFinite(n) ? n : null;
                    };
                    const parseCSV = (s, to = 'string') => {
                        if (!s || !String(s).trim()) return null;
                        const arr = String(s).split(',').map(x => x.trim()).filter(Boolean);
                        if (!arr.length) return null;
                        if (to === 'int') return arr.map(x => Number(x)).filter(n => Number.isFinite(n));
                        return arr;
                    };
                    const out = {
                        anilist_id: toInt(f.anilist_id)
                    };
                    // Scalars with modes
                    if (f.anidb_mode === 'null') out.anidb_id = null;
                    else if (f.anidb_mode === 'value') out.anidb_id = toInt(f.anidb_id);
                    if (f.tvdb_mode === 'null') out.tvdb_id = null;
                    else if (f.tvdb_mode === 'value') out.tvdb_id = toInt(f.tvdb_id);
                    // Arrays with modes
                    if (f.imdb_mode === 'null') out.imdb_id = null;
                    else if (f.imdb_mode === 'value') out.imdb_id = parseCSV(f.imdb_csv, 'string');
                    if (f.mal_mode === 'null') out.mal_id = null;
                    else if (f.mal_mode === 'value') out.mal_id = parseCSV(f.mal_csv, 'int');
                    if (f.tmdb_movie_mode === 'null') out.tmdb_movie_id = null;
                    else if (f.tmdb_movie_mode === 'value') out.tmdb_movie_id = parseCSV(f.tmdb_movie_csv, 'int');
                    if (f.tmdb_show_mode === 'null') out.tmdb_show_id = null;
                    else if (f.tmdb_show_mode === 'value') out.tmdb_show_id = parseCSV(f.tmdb_show_csv, 'int');
                    // tvdb_mappings with mode
                    if (f.tvdb_map_mode === 'null') {
                        out.tvdb_mappings = null;
                    } else if (f.tvdb_map_mode === 'value') {
                        const obj = {};
                        if (Array.isArray(f.tvdb_mappings)) {
                            for (const row of f.tvdb_mappings) {
                                if (!row || !row.season) continue;
                                let key = String(row.season).trim();
                                if (!key) continue;
                                if (!key.toLowerCase().startsWith('s')) key = 's' + key;
                                obj[key] = row.pattern ? String(row.pattern) : '';
                            }
                        }
                        out.tvdb_mappings = Object.keys(obj).length ? obj : null;
                    }
                    return out;
                },
                fetchAni() {
                    try {
                        if (!window.AniList || typeof AniList.fetch !== 'function') return;
                        const ids = [...new Set(this.items.map(m => m.anilist_id).filter(Boolean))];
                        const missing = ids.filter(id => !this.media[id]);
                        if (!missing.length) return;
                        AniList.fetch(missing).then(data => {
                            this.media = {
                                ...this.media,
                                ...data
                            };
                        });
                    } catch (_) {}
                },
                mappingAni(m) {
                    const id = m?.anilist_id;
                    return id ? this.media[id] : null;
                },
                aniTitle(a) {
                    try {
                        const t = (window.AniList && typeof AniList.getTitle === 'function') ? AniList.getTitle(a, null) : null;
                        return t || ('#' + a.id);
                    } catch {
                        return '#' + a.id;
                    }
                },
                linkFor(type, id) {
                    if (id === null || id === undefined || id === '') return null;
                    const val = String(id);
                    switch (type) {
                        case 'anilist':
                            return `https://anilist.co/anime/${val}`;
                        case 'anidb':
                            return `https://anidb.net/anime/${val}`;
                        case 'imdb':
                            return `https://www.imdb.com/title/${val}/`;
                        case 'tmdb_movie':
                            return `https://www.themoviedb.org/movie/${val}`;
                        case 'tmdb_show':
                            return `https://www.themoviedb.org/tv/${val}`;
                        case 'tvdb':
                            return `https://thetvdb.com/?tab=series&id=${val}`;
                        case 'mal':
                            return `https://myanimelist.net/anime/${val}`;
                        default:
                            return null;
                    }
                },
                fmtLinks(type, value) {
                    const toAnchor = (v) => {
                        const url = this.linkFor(type, v);
                        const txt = String(v);
                        return url ? `<a href="${url}" target="_blank" rel="noopener" class="text-emerald-400 hover:underline">${txt}</a>` : txt;
                    };
                    if (value === null || value === undefined || (Array.isArray(value) && !value.length)) return '-';
                    if (Array.isArray(value)) return value.map(toAnchor).join(',');
                    return toAnchor(value);
                },
                toggleRaw(m) {
                    this.rawOpen[m.anilist_id] = !this.rawOpen[m.anilist_id];
                },
                fmtSeasons(m) {
                    return Object.keys(m.tvdb_mappings || {}).length;
                }
            };
        }
    </script>
{% endblock content %}
