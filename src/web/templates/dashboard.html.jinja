{% extends "base.html.jinja" %}
{% block content %}
    <div x-data="statusFeed()" x-init="init()" class="space-y-6">
        <!-- Header / Controls -->
        <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
            <div class="flex items-center gap-3">
                <h2 class="text-xl font-semibold tracking-tight flex items-center gap-2">
                    <iconify-icon icon="lucide:users" class="w-5 h-5 text-slate-400"></iconify-icon>
                    <span>Profiles</span>
                </h2>
                <span class="inline-flex items-center gap-1 text-xs px-2 py-0.5 rounded-md ring-1"
                      :class="isWsOpen ? 'bg-emerald-900/30 text-emerald-300 ring-emerald-700/40' : 'bg-amber-900/30 text-amber-300 ring-amber-700/40'">
                    <span class="w-1.5 h-1.5 rounded-md"
                          :class="isWsOpen ? 'bg-emerald-400' : 'bg-amber-400'"></span>
                    <span x-text="isWsOpen ? 'Live' : 'Reconnecting…'"></span>
                </span>
                <span class="hidden sm:inline text-xs text-slate-400">
                    <span x-text="profileCount()"></span> total
                    <template x-if="lastRefreshed">
                        <span>• updated <span x-text="formatTimeAgo(lastRefreshed)"></span></span>
                    </template>
                </span>
            </div>
            <div class="flex items-center gap-2">
                <button @click="syncAll(false)"
                        class="text-sm px-3 py-1.5 rounded-md bg-emerald-600 hover:bg-emerald-500 ring-1 ring-emerald-500/30">
                    Full Sync All
                </button>
                <button @click="syncAll(true)"
                        class="text-sm px-3 py-1.5 rounded-md bg-blue-600 hover:bg-blue-500 ring-1 ring-blue-500/30">
                    Poll Sync All
                </button>
            </div>
        </div>
        <!-- Grid / Cards -->
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2 xl:grid-cols-3">
            <!-- Loading skeletons -->
            <template x-if="isLoading && profileCount() === 0">
                <template x-for="i in 3" :key="'sk-'+i">
                    <div class="border border-slate-800/60 rounded-md p-4 bg-slate-900/40 animate-pulse">
                        <div class="h-4 w-1/3 bg-slate-700/60 rounded-md"></div>
                        <div class="mt-3 h-3 w-1/2 bg-slate-800/60 rounded-md"></div>
                        <div class="mt-3 flex gap-2">
                            <div class="h-6 w-20 bg-slate-800/60 rounded-md"></div>
                            <div class="h-6 w-24 bg-slate-800/60 rounded-md"></div>
                            <div class="h-6 w-16 bg-slate-800/60 rounded-md"></div>
                        </div>
                    </div>
                </template>
            </template>
            <!-- Profile cards -->
            <template x-for="([name, p], idx) in profileEntries()" :key="name">
                <div class="group border border-slate-800/80 rounded-md p-4 bg-slate-900/40 hover:bg-slate-900/60 transition-colors cursor-pointer focus:outline-none focus:ring-2 focus:ring-fuchsia-500/50"
                     @click="goTimeline(name)"
                     @keydown.enter.prevent="goTimeline(name)"
                     @keydown.space.prevent="goTimeline(name)"
                     tabindex="0"
                     :title="'Open timeline for '+name">
                    <div class="flex items-start justify-between gap-2">
                        <div>
                            <div class="font-medium text-slate-100" x-text="name"></div>
                            <div class="text-xs text-slate-400 mt-1">
                                <template x-if="p?.status?.last_synced">
                                    <span :title="new Date(p.status.last_synced).toLocaleString()">
                                        Last sync · <span x-text="formatTimeAgo(p.status.last_synced)"></span>
                                    </span>
                                </template>
                                <template x-if="!p?.status?.last_synced">
                                    <span>No sync yet</span>
                                </template>
                            </div>
                        </div>
                        <div class="flex shrink-0 gap-1 items-start">
                            <a :href="'/timeline/'+name"
                               @click.stop
                               class="text-xs px-2 py-1 rounded-md bg-fuchsia-600/90 hover:bg-fuchsia-500 ring-1 ring-fuchsia-500/40 font-medium flex items-center gap-1 shadow-sm">
                                <span>Timeline</span>
                                <svg xmlns="http://www.w3.org/2000/svg"
                                     viewBox="0 0 20 20"
                                     fill="currentColor"
                                     class="w-3.5 h-3.5">
                                    <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l5 5a.997.997 0 01.083 1.32l-.083.094-5 5a1 1 0 01-1.497-1.32l.083-.094L13.585 11H4a1 1 0 01-.117-1.993L4 9h9.585l-3.292-3.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </a>
                            <button @click.stop="sync(name,false)"
                                    class="text-xs px-2 py-1 rounded-md bg-emerald-600 hover:bg-emerald-500 ring-1 ring-emerald-500/30">
                                Full
                            </button>
                            <button @click.stop="sync(name,true)"
                                    class="text-xs px-2 py-1 rounded-md bg-blue-600 hover:bg-blue-500 ring-1 ring-blue-500/30">
                                Poll
                            </button>
                        </div>
                    </div>
                    <div class="mt-3 text-xs flex flex-wrap gap-2">
                        <span class="px-2 py-1 rounded-md bg-slate-800/80 text-slate-200"
                              x-text="p?.config?.anilist_user"></span>
                        <span class="px-2 py-1 rounded-md bg-slate-800/80 text-slate-300"
                              x-text="'Interval: ' + (p?.config?.sync_interval ?? '-')"></span>
                        <span class="px-2 py-1 rounded-md"
                              :class="p?.config?.polling_scan ? 'bg-blue-900/50 text-blue-200' : 'bg-slate-800/80 text-slate-300'"
                              x-text="p?.config?.polling_scan ? 'Polling' : 'No Poll'"></span>
                    </div>
                </div>
            </template>
        </div>
    </div>
    <script>
        function statusFeed() {
            return {
                profiles: {},
                ws: null,
                isLoading: true,
                isWsOpen: false,
                lastRefreshed: null,
                init() {
                    this.refresh();
                    this.openWs();
                },
                profileCount() {
                    return Object.keys(this.profiles || {}).length;
                },
                profileEntries() {
                    // Sort entries by name for consistent rendering
                    const entries = Object.entries(this.profiles || {});
                    entries.sort((a, b) => a[0].localeCompare(b[0]));
                    return entries;
                },
                openWs() {
                    const url = getWsBase() + '/ws/status';
                    this.ws = new WebSocket(url);
                    this.ws.onopen = () => {
                        this.isWsOpen = true;
                    };
                    this.ws.onmessage = (ev) => {
                        try {
                            const data = JSON.parse(ev.data);
                            if (data && data.profiles) {
                                this.profiles = data.profiles || {};
                                this.isLoading = false;
                                this.lastRefreshed = Date.now();
                            }
                        } catch (_) {}
                    };
                    this.ws.onclose = () => {
                        this.isWsOpen = false;
                        setTimeout(() => this.openWs(), 2000);
                    };
                },
                refresh() {
                    fetch('/api/status')
                        .then(r => r.ok ? r.json() : Promise.reject())
                        .then(d => {
                            this.profiles = d?.profiles || {};
                            this.isLoading = false;
                            this.lastRefreshed = Date.now();
                        })
                        .catch(() => {});
                },
                syncAll(poll) {
                    fetch('/api/sync?poll=' + poll, {
                            method: 'POST'
                        })
                        .then(() => this.refresh());
                },
                sync(name, poll) {
                    fetch('/api/sync/' + name + '?poll=' + poll, {
                            method: 'POST'
                        })
                        .then(() => this.refresh());
                },
                goTimeline(name) {
                    if (!name) return;
                    window.location = '/timeline/' + name;
                },
                formatTimeAgo(ts) {
                    if (!ts) return '—';
                    const d = new Date(ts);
                    const diff = Math.max(0, Date.now() - d.getTime());
                    const sec = Math.floor(diff / 1000);
                    if (sec < 45) return 'just now';
                    const min = Math.floor(sec / 60);
                    if (min < 60) return `${min}m ago`;
                    const hr = Math.floor(min / 60);
                    if (hr < 24) return `${hr}h ago`;
                    const day = Math.floor(hr / 24);
                    return `${day}d ago`;
                }
            }
        }
    </script>
{% endblock content %}
