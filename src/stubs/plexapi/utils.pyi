import io
import logging
from collections.abc import Callable, Iterator
from datetime import datetime
from logging import Logger
from typing import Any
from xml.etree.ElementTree import Element, ElementTree

from _typeshed import Incomplete

from plexapi.base import PlexObject
from plexapi.library import LibrarySection
from plexapi.myplex import MyPlexAccount, MyPlexDevice
from plexapi.server import PlexServer

log: Logger
SEARCHTYPES: dict[str, int]
REVERSESEARCHTYPES: dict[int, str]
TAGTYPES: dict[str, int]
REVERSETAGTYPES: dict[int, str]
PLEXOBJECTS: dict[str, PlexObject]

class SecretsFilter(logging.Filter):
    secrets: set[str]
    def __init__(self, secrets: set[str] | None = None) -> None: ...
    def add_secret(self, secret: str) -> str: ...
    def filter(self, record: logging.LogRecord) -> bool: ...

def registerPlexObject(cls: PlexObject) -> PlexObject: ...
def getPlexObject(ehash: str, default: PlexObject) -> PlexObject | None: ...
def cast(
    func: Callable[[Any], str | int | float | bool], value: Any
) -> str | int | float | bool: ...
def joinArgs(args: dict) -> str: ...
def lowerFirst(s: str) -> str: ...
def rget(obj: Any, attrstr: str, default: Any = None, delim: str = ".") -> Any: ...
def searchType(libtype: str) -> str: ...
def reverseSearchType(libtype: str) -> int: ...
def tagType(tag: str) -> str: ...
def reverseTagType(tag: str) -> int: ...
def threaded(callback: Callable[[Any], Any], listargs: list[list]) -> Any: ...
def toDatetime(value: str, format: str | None = None) -> datetime | None: ...
def millisecondToHumanstr(milliseconds: int) -> str: ...
def toList(
    value: Any, itemcast: Callable[[str], Any] | None = None, delim: str = ","
) -> list[Any]: ...
def cleanFilename(filename: str, replace: str = "_") -> str: ...
def downloadSessionImages(
    server: PlexServer,
    filename: Incomplete | None = None,  # TODO: type
    height: int = 150,
    width: int = 150,
    opacity: int = 100,
    saturation: int = 100,
) -> dict: ...
def download(
    url: str,
    token: str,
    filename: str | None = None,
    savepath: str | None = None,
    session: int | None = None,
    chunksize: int = 4096,
    unpack: bool = False,
    mocked: bool = False,
    showstatus: bool = False,
) -> str: ...
def getMyPlexAccount(opts: Incomplete | None = None) -> MyPlexAccount: ...  # TODO: type
def createMyPlexDevice(
    headers: dict, account: MyPlexAccount, timeout: int = 10
) -> MyPlexDevice: ...
def plexOAuth(headers: dict, forwardUrl: str | None = None, timeout: int = 120): ...
def choose(msg: str, items: list, attr): ...
def getAgentIdentifier(section: LibrarySection, agent: str) -> str: ...
def base64str(text: str): ...
def deprecated(message: str, stacklevel: int = 2): ...
def iterXMLBFS(root: ElementTree, tag: str | None = None) -> Iterator[Element]: ...
def toJson(obj: object, **kwargs) -> str: ...
def openOrRead(file: str | io.BufferedReader): ...
def sha1hash(guid: str) -> str: ...
def cleanXMLString(s: str) -> str: ...
