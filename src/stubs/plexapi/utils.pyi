import logging
from collections.abc import Generator

from _typeshed import Incomplete

log: Incomplete
SEARCHTYPES: Incomplete
REVERSESEARCHTYPES: Incomplete
TAGTYPES: Incomplete
REVERSETAGTYPES: Incomplete
PLEXOBJECTS: Incomplete

class SecretsFilter(logging.Filter):
    secrets: Incomplete
    def __init__(self, secrets: Incomplete | None = None) -> None: ...
    def add_secret(self, secret): ...
    def filter(self, record): ...

def registerPlexObject(cls): ...
def getPlexObject(ehash, default): ...
def cast(func, value): ...
def joinArgs(args): ...
def lowerFirst(s): ...
def rget(obj, attrstr, default: Incomplete | None = None, delim: str = "."): ...
def searchType(libtype): ...
def reverseSearchType(libtype): ...
def tagType(tag): ...
def reverseTagType(tag): ...
def threaded(callback, listargs): ...
def toDatetime(value, format: Incomplete | None = None): ...
def millisecondToHumanstr(milliseconds): ...
def toList(value, itemcast: Incomplete | None = None, delim: str = ","): ...
def cleanFilename(filename, replace: str = "_"): ...
def downloadSessionImages(
    server,
    filename: Incomplete | None = None,
    height: int = 150,
    width: int = 150,
    opacity: int = 100,
    saturation: int = 100,
): ...
def download(
    url,
    token,
    filename: Incomplete | None = None,
    savepath: Incomplete | None = None,
    session: Incomplete | None = None,
    chunksize: int = 4096,
    unpack: bool = False,
    mocked: bool = False,
    showstatus: bool = False,
): ...
def getMyPlexAccount(opts: Incomplete | None = None): ...
def createMyPlexDevice(headers, account, timeout: int = 10): ...
def plexOAuth(headers, forwardUrl: Incomplete | None = None, timeout: int = 120): ...
def choose(msg, items, attr): ...
def getAgentIdentifier(section, agent): ...
def base64str(text): ...
def deprecated(message, stacklevel: int = 2): ...
def iterXMLBFS(root, tag: Incomplete | None = None) -> Generator[Incomplete]: ...
def toJson(obj, **kwargs): ...
def openOrRead(file): ...
def sha1hash(guid): ...
def cleanXMLString(s): ...
