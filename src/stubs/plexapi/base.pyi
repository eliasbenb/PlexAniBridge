from collections.abc import Generator, Iterable
from datetime import datetime
from functools import cached_property
from typing import Any, Generic, TypeVar
from xml.etree.ElementTree import Element

import requests
from _typeshed import Incomplete
from typing_extensions import Self

from plexapi.client import PlexClient
from plexapi.library import LibrarySection
from plexapi.media import AudioStream, LyricStream, SubtitleStream, VideoStream
from plexapi.myplex import MyPlexAccount, MyPlexUser
from plexapi.server import PlexServer

PlexObjectT = TypeVar("PlexObjectT", bound="PlexObject")
MediaContainerT = TypeVar("MediaContainerT", bound="MediaContainer")
USER_DONT_RELOAD_FOR_KEYS: set[str]
OPERATORS: dict

class cached_data_property(cached_property): ...

class PlexObject:
    TAG: str
    TYPE: str
    key: str
    _server: PlexServer
    def __init__(
        self,
        server: PlexServer,
        data: Element,
        initpath: str | None = None,
        parent: PlexObject | None = None,
    ) -> None: ...
    def __setattr__(self, attr: str, value: Any) -> None: ...
    def fetchItems(
        self,
        ekey,
        cls: type[PlexObjectT] | None = None,
        container_start: int | None = None,
        container_size: int | None = None,
        maxresults: int | None = None,
        params: requests.sessions._Params | None = None,
        **kwargs,
    ) -> list[PlexObjectT]: ...
    def fetchItem(
        self, ekey: str, cls: type[PlexObjectT] | None = None, **kwargs
    ) -> PlexObjectT: ...
    def findItems(
        self,
        data: Element,
        cls: type[PlexObjectT] | None = None,
        initpath: str | None = None,
        rtag: str | None = None,
        **kwargs,
    ) -> list[PlexObjectT]: ...
    def findItem(
        self,
        data: Element,
        cls: type[PlexObjectT] | None = None,
        initpath: str | None = None,
        rtag: str | None = None,
        **kwargs,
    ) -> PlexObjectT: ...
    def firstAttr(self, *attrs) -> Any: ...
    def listAttrs(
        self, data: Element, attr: str, rtag: str | None = None, **kwargs
    ) -> list[Any]: ...
    def reload(self, key: str | None = None, **kwargs) -> Self: ...
    def _reload(
        self, key: str | None = None, _overwriteNone: bool = True, **kwargs
    ) -> Self: ...
    def _loadData(self, data: Element) -> None: ...

class PlexPartialObject(PlexObject):
    def __eq__(self, other): ...
    def __hash__(self): ...
    def __iter__(self): ...
    def __getattribute__(self, attr): ...
    def analyze(self) -> None: ...
    def isFullObject(self) -> bool: ...
    def isPartialObject(self) -> bool: ...
    def isLocked(self, field: str) -> bool: ...
    def edit(self, **kwargs): ...
    def batchEdits(self): ...
    def saveEdits(self): ...
    def refresh(self) -> None: ...
    def section(self) -> LibrarySection: ...
    def delete(self): ...
    def history(
        self, maxresults: int | None = None, mindate: datetime | None = None
    ) -> list: ...
    def getWebURL(self, base: str | None = None) -> str: ...
    def playQueue(self, *args, **kwargs): ...

class Playable:
    def getStreamURL(self, **kwargs) -> str: ...
    def iterParts(self) -> Generator[Incomplete]: ...
    def videoStreams(self) -> list[VideoStream]: ...
    def audioStreams(self) -> list[AudioStream]: ...
    def subtitleStreams(self) -> list[SubtitleStream]: ...
    def lyricStreams(self) -> list[LyricStream]: ...
    def play(self, client: PlexClient.__class__) -> None: ...
    def download(
        self,
        savepath: str | None = None,
        keep_original_name: bool = False,
        **kwargs,
    ): ...
    def updateProgress(self, time: int, state: str = "stopped") -> Self: ...
    def updateTimeline(
        self, time, state: str = "stopped", duration: int | None = None
    ) -> Self: ...

class PlexSession:
    @cached_property
    def user(self) -> MyPlexAccount | MyPlexUser: ...
    def source(self): ...
    def stop(self, reason: str = ""): ...

class PlexHistory:
    def source(self): ...
    def delete(self): ...

class MediaContainer(list[PlexObjectT], PlexObject, Generic[PlexObjectT]):
    def __init__(
        self,
        server: PlexServer,
        data: Element,
        *args: PlexObjectT,
        initpath: str | None = None,
        parent: PlexObject | None = None,
    ) -> None: ...
    totalSize: int
    size: int
    offset: int
    def extend(
        self, /, __iterable: Iterable[PlexObjectT] | MediaContainer[PlexObjectT]
    ) -> None: ...
